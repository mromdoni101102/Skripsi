{"version":3,"names":["_getJestObj","mock","MockedCard","children","_jsxRuntime","jsx","className","virtual","require","jest","React","render","screen","process","env","SUBMISSION_PATH","Error","submission","MyProfileV2","default","describe","test","mockedCards","getAllByRole","name","filter","el","classList","contains","expect","length","toBe"],"sources":["myprofilev2.test.js"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\nrequire('@testing-library/jest-dom');\nconst React = require('react');\nconst { render, screen } = require('@testing-library/react');\n\n// ======================================================================\n// BAGIAN 1: MENYIAPKAN \"KARTU PALSU\"\n// ======================================================================\n// Ini memberitahu Jest: \"Aku tahu kode mahasiswa butuh './Card.js'.\n// Ini adalah versi palsunya, gunakan ini.\"\n// Ini harus sama persis dengan path yang ada di `import` mahasiswa.\njest.mock('./Card.js', () => {\n    // Fungsi ini akan menjadi komponen Card tiruan kita\n    return function MockedCard({ children }) {\n        // Kita beri class \"card-mock\" untuk membuktikan ia terpanggil\n        return <div className=\"card-mock\">{children}</div>;\n    };\n}, { virtual: true }); // virtual: true penting agar tidak butuh file fisik\n\n\n// ======================================================================\n// BAGIAN 2: MENGAMBIL KODE MAHASISWA\n// ======================================================================\nif (!process.env.SUBMISSION_PATH) {\n  throw new Error('SUBMISSION_PATH environment variable not set.');\n}\nconst submission = require(process.env.SUBMISSION_PATH);\nconst MyProfileV2 = submission.MyProfileV2 || submission.default || submission;\n\n\n// ======================================================================\n// BAGIAN 3: SATU TES UNTUK MEMBUKTIKAN SEMUANYA\n// ======================================================================\ndescribe('Praktikum: Komponen MyProfileV2', () => {\n\n  test('Kriteria Paling Dasar: Komponen harus bisa dirender tanpa crash', () => {\n    // Jika tes ini LULUS, berarti masalah dependency sudah teratasi.\n    render(<MyProfileV2 />);\n\n    // Kita cek apakah \"Kartu Palsu\" kita benar-benar muncul di layar.\n    // Ini membuktikan bahwa mocking berhasil.\n    const mockedCards = screen.getAllByRole('generic', { name: '' }).filter(el => el.classList.contains('card-mock'));\n    expect(mockedCards.length).toBe(2);\n  });\n\n});\n"],"mappings":";;AAOA;AACA;AACA;AACA;AACA;AACA;AACAA,WAAA,GAAKC,IAAI,CAAC,WAAW,EAAE,MAAM;EACzB;EACA,OAAO,SAASC,UAAUA,CAAC;IAAEC;EAAS,CAAC,EAAE;IACrC;IACA,oBAAO,IAAAC,WAAA,CAAAC,GAAA;MAAKC,SAAS,EAAC,WAAW;MAAAH,QAAA,EAAEA;IAAQ,CAAM,CAAC;EACtD,CAAC;AACL,CAAC,EAAE;EAAEI,OAAO,EAAE;AAAK,CAAC,CAAC,CAAC,CAAC;;AAGvB;AACA;AACA;AAAA,IAAAH,WAAA,GAAAI,OAAA;AAAA,SAAAR,YAAA;EAAA;IAAAS;EAAA,IAAAD,OAAA;EAAAR,WAAA,GAAAA,CAAA,KAAAS,IAAA;EAAA,OAAAA,IAAA;AAAA;AAxBA;AACA;AACA;AACAD,OAAO,CAAC,2BAA2B,CAAC;AACpC,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAM;EAAEG,MAAM;EAAEC;AAAO,CAAC,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AAoB5D,IAAI,CAACK,OAAO,CAACC,GAAG,CAACC,eAAe,EAAE;EAChC,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;AAClE;AACA,MAAMC,UAAU,GAAGT,OAAO,CAACK,OAAO,CAACC,GAAG,CAACC,eAAe,CAAC;AACvD,MAAMG,WAAW,GAAGD,UAAU,CAACC,WAAW,IAAID,UAAU,CAACE,OAAO,IAAIF,UAAU;;AAG9E;AACA;AACA;AACAG,QAAQ,CAAC,iCAAiC,EAAE,MAAM;EAEhDC,IAAI,CAAC,iEAAiE,EAAE,MAAM;IAC5E;IACAV,MAAM,cAAC,IAAAP,WAAA,CAAAC,GAAA,EAACa,WAAW,IAAE,CAAC,CAAC;;IAEvB;IACA;IACA,MAAMI,WAAW,GAAGV,MAAM,CAACW,YAAY,CAAC,SAAS,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC,CAAC,CAACC,MAAM,CAACC,EAAE,IAAIA,EAAE,CAACC,SAAS,CAACC,QAAQ,CAAC,WAAW,CAAC,CAAC;IACjHC,MAAM,CAACP,WAAW,CAACQ,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACpC,CAAC,CAAC;AAEJ,CAAC,CAAC","ignoreList":[]}