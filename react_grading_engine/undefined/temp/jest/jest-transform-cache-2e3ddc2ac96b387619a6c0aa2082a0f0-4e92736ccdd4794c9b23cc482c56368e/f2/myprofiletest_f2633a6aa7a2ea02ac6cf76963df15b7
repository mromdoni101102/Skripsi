c083d214f243d2c59aa6e7081d0d5c6c
"use strict";

// ======================================================================
// BAGIAN 1: PERSIAPAN LINGKUNGAN (MOCKING FUNGSI getImageUrlV2)
// ======================================================================

// Ini adalah bagian terpenting. Kita beritahu Jest untuk mencegat TEPAT
// alamat yang diminta oleh kode mahasiswa.
_getJestObj().mock('../../utils/utils.js', () => ({
  // Sebagai gantinya, berikan fungsi getImageUrlV2 tiruan yang simpel ini.
  // Fungsi ini akan selalu mengembalikan URL yang bisa kita prediksi.
  getImageUrlV2: (person, sizeCode) => `https://i.imgur.com/${person.imageId}${sizeCode}.jpg`
}), {
  virtual: true
}); // virtual: true membuatnya tidak perlu file fisik sama sekali.

// ======================================================================
// BAGIAN 2: MENGAMBIL KODE MAHASISWA
// ======================================================================
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen
} = require('@testing-library/react');
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
// Mengambil komponen MyProfile dari file jawaban mahasiswa.
const MyProfile = require(process.env.SUBMISSION_PATH).default;

// ======================================================================
// BAGIAN 3: "CHECKLIST" PENILAIAN FUNGSIONAL (VERSI LENGKAP ANDA)
// ======================================================================
describe('Praktikum: Komponen MyProfile dan MyAvatar', () => {
  beforeEach(() => {
    // Render komponen mahasiswa sebelum setiap tes
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(MyProfile, {}));
  });
  test('Kriteria 1: Harus me-render DUA gambar avatar', () => {
    // Cari semua elemen dengan peran 'img'
    const avatars = screen.getAllByRole('img');
    expect(avatars).toHaveLength(2);
  });
  test('Kriteria 2: Avatar Gregorio Y. Zara harus memiliki atribut yang benar', () => {
    // Cari gambar berdasarkan teks alternatifnya
    const gregorioAvatar = screen.getByAltText('Gregorio Y. Zara');
    expect(gregorioAvatar).toBeInTheDocument();
    expect(gregorioAvatar).toHaveClass('avatar');
    // Verifikasi src berdasarkan hasil dari fungsi tiruan kita
    expect(gregorioAvatar).toHaveAttribute('src', 'https://i.imgur.com/7vQD0fPs.jpg');
    // Verifikasi ukuran
    expect(gregorioAvatar).toHaveAttribute('width', '40');
  });
  test('Kriteria 3: Avatar Ada Lovelace harus memiliki atribut yang benar', () => {
    // Cari gambar berdasarkan teks alternatifnya
    const adaAvatar = screen.getByAltText('Ada Lovelace');
    expect(adaAvatar).toBeInTheDocument();
    expect(adaAvatar).toHaveClass('avatar');
    // Verifikasi src berdasarkan hasil dari fungsi tiruan kita
    expect(adaAvatar).toHaveAttribute('src', 'https://i.imgur.com/rDE2SL3Lb.jpg');
    // Verifikasi ukuran
    expect(adaAvatar).toHaveAttribute('width', '100');
  });
  test('Kriteria 4: Logika untuk ukuran gambar harus benar (size < 90 vs size >= 90)', () => {
    // Kita butuh referensi ke fungsi tiruan kita untuk memeriksa panggilannya
    const {
      getImageUrlV2
    } = require('../../utils/utils.js');

    // Panggil ulang render di sini agar kita bisa memastikan mock-nya bersih
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(MyProfile, {}));

    // Cek bahwa untuk Gregorio (size 40), size code yang dikirim adalah 's'
    expect(getImageUrlV2).toHaveBeenCalledWith(expect.objectContaining({
      name: 'Gregorio Y. Zara'
    }), 's');

    // Cek bahwa untuk Ada (size 100), size code yang dikirim adalah 'b'
    expect(getImageUrlV2).toHaveBeenCalledWith(expect.objectContaining({
      name: 'Ada Lovelace'
    }), 'b');
  });
  test('Kriteria 5: Komponen "MyProfile" harus diexport dengan benar', () => {
    expect(MyProfile).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRJbWFnZVVybFYyIiwicGVyc29uIiwic2l6ZUNvZGUiLCJpbWFnZUlkIiwidmlydHVhbCIsIl9qc3hSdW50aW1lIiwicmVxdWlyZSIsImplc3QiLCJSZWFjdCIsInJlbmRlciIsInNjcmVlbiIsInByb2Nlc3MiLCJlbnYiLCJTVUJNSVNTSU9OX1BBVEgiLCJFcnJvciIsIk15UHJvZmlsZSIsImRlZmF1bHQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJqc3giLCJ0ZXN0IiwiYXZhdGFycyIsImdldEFsbEJ5Um9sZSIsImV4cGVjdCIsInRvSGF2ZUxlbmd0aCIsImdyZWdvcmlvQXZhdGFyIiwiZ2V0QnlBbHRUZXh0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJ0b0hhdmVDbGFzcyIsInRvSGF2ZUF0dHJpYnV0ZSIsImFkYUF2YXRhciIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwib2JqZWN0Q29udGFpbmluZyIsIm5hbWUiLCJ0b0JlRGVmaW5lZCJdLCJzb3VyY2VzIjpbIm15cHJvZmlsZS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGplc3QtZW52aXJvbm1lbnQganNkb21cbiAqL1xucmVxdWlyZSgnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbScpO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyByZW5kZXIsIHNjcmVlbiB9ID0gcmVxdWlyZSgnQHRlc3RpbmctbGlicmFyeS9yZWFjdCcpO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBCQUdJQU4gMTogUEVSU0lBUEFOIExJTkdLVU5HQU4gKE1PQ0tJTkcgRlVOR1NJIGdldEltYWdlVXJsVjIpXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIEluaSBhZGFsYWggYmFnaWFuIHRlcnBlbnRpbmcuIEtpdGEgYmVyaXRhaHUgSmVzdCB1bnR1ayBtZW5jZWdhdCBURVBBVFxuLy8gYWxhbWF0IHlhbmcgZGltaW50YSBvbGVoIGtvZGUgbWFoYXNpc3dhLlxuamVzdC5tb2NrKCcuLi8uLi91dGlscy91dGlscy5qcycsICgpID0+ICh7XG4gIC8vIFNlYmFnYWkgZ2FudGlueWEsIGJlcmlrYW4gZnVuZ3NpIGdldEltYWdlVXJsVjIgdGlydWFuIHlhbmcgc2ltcGVsIGluaS5cbiAgLy8gRnVuZ3NpIGluaSBha2FuIHNlbGFsdSBtZW5nZW1iYWxpa2FuIFVSTCB5YW5nIGJpc2Ega2l0YSBwcmVkaWtzaS5cbiAgZ2V0SW1hZ2VVcmxWMjogKHBlcnNvbiwgc2l6ZUNvZGUpID0+IGBodHRwczovL2kuaW1ndXIuY29tLyR7cGVyc29uLmltYWdlSWR9JHtzaXplQ29kZX0uanBnYCxcbn0pLCB7IHZpcnR1YWw6IHRydWUgfSk7IC8vIHZpcnR1YWw6IHRydWUgbWVtYnVhdG55YSB0aWRhayBwZXJsdSBmaWxlIGZpc2lrIHNhbWEgc2VrYWxpLlxuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJBR0lBTiAyOiBNRU5HQU1CSUwgS09ERSBNQUhBU0lTV0Fcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmlmICghcHJvY2Vzcy5lbnYuU1VCTUlTU0lPTl9QQVRIKSB7XG4gIHRocm93IG5ldyBFcnJvcignU1VCTUlTU0lPTl9QQVRIIGVudmlyb25tZW50IHZhcmlhYmxlIG5vdCBzZXQuJyk7XG59XG4vLyBNZW5nYW1iaWwga29tcG9uZW4gTXlQcm9maWxlIGRhcmkgZmlsZSBqYXdhYmFuIG1haGFzaXN3YS5cbmNvbnN0IE15UHJvZmlsZSA9IHJlcXVpcmUocHJvY2Vzcy5lbnYuU1VCTUlTU0lPTl9QQVRIKS5kZWZhdWx0O1xuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJBR0lBTiAzOiBcIkNIRUNLTElTVFwiIFBFTklMQUlBTiBGVU5HU0lPTkFMIChWRVJTSSBMRU5HS0FQIEFOREEpXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5kZXNjcmliZSgnUHJha3Rpa3VtOiBLb21wb25lbiBNeVByb2ZpbGUgZGFuIE15QXZhdGFyJywgKCkgPT4ge1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIC8vIFJlbmRlciBrb21wb25lbiBtYWhhc2lzd2Egc2ViZWx1bSBzZXRpYXAgdGVzXG4gICAgICAgIHJlbmRlcig8TXlQcm9maWxlIC8+KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0tyaXRlcmlhIDE6IEhhcnVzIG1lLXJlbmRlciBEVUEgZ2FtYmFyIGF2YXRhcicsICgpID0+IHtcbiAgICAgICAgLy8gQ2FyaSBzZW11YSBlbGVtZW4gZGVuZ2FuIHBlcmFuICdpbWcnXG4gICAgICAgIGNvbnN0IGF2YXRhcnMgPSBzY3JlZW4uZ2V0QWxsQnlSb2xlKCdpbWcnKTtcbiAgICAgICAgZXhwZWN0KGF2YXRhcnMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0tyaXRlcmlhIDI6IEF2YXRhciBHcmVnb3JpbyBZLiBaYXJhIGhhcnVzIG1lbWlsaWtpIGF0cmlidXQgeWFuZyBiZW5hcicsICgpID0+IHtcbiAgICAgICAgLy8gQ2FyaSBnYW1iYXIgYmVyZGFzYXJrYW4gdGVrcyBhbHRlcm5hdGlmbnlhXG4gICAgICAgIGNvbnN0IGdyZWdvcmlvQXZhdGFyID0gc2NyZWVuLmdldEJ5QWx0VGV4dCgnR3JlZ29yaW8gWS4gWmFyYScpO1xuICAgICAgICBleHBlY3QoZ3JlZ29yaW9BdmF0YXIpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgIGV4cGVjdChncmVnb3Jpb0F2YXRhcikudG9IYXZlQ2xhc3MoJ2F2YXRhcicpO1xuICAgICAgICAvLyBWZXJpZmlrYXNpIHNyYyBiZXJkYXNhcmthbiBoYXNpbCBkYXJpIGZ1bmdzaSB0aXJ1YW4ga2l0YVxuICAgICAgICBleHBlY3QoZ3JlZ29yaW9BdmF0YXIpLnRvSGF2ZUF0dHJpYnV0ZSgnc3JjJywgJ2h0dHBzOi8vaS5pbWd1ci5jb20vN3ZRRDBmUHMuanBnJyk7XG4gICAgICAgIC8vIFZlcmlmaWthc2kgdWt1cmFuXG4gICAgICAgIGV4cGVjdChncmVnb3Jpb0F2YXRhcikudG9IYXZlQXR0cmlidXRlKCd3aWR0aCcsICc0MCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnS3JpdGVyaWEgMzogQXZhdGFyIEFkYSBMb3ZlbGFjZSBoYXJ1cyBtZW1pbGlraSBhdHJpYnV0IHlhbmcgYmVuYXInLCAoKSA9PiB7XG4gICAgICAgIC8vIENhcmkgZ2FtYmFyIGJlcmRhc2Fya2FuIHRla3MgYWx0ZXJuYXRpZm55YVxuICAgICAgICBjb25zdCBhZGFBdmF0YXIgPSBzY3JlZW4uZ2V0QnlBbHRUZXh0KCdBZGEgTG92ZWxhY2UnKTtcbiAgICAgICAgZXhwZWN0KGFkYUF2YXRhcikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgICAgZXhwZWN0KGFkYUF2YXRhcikudG9IYXZlQ2xhc3MoJ2F2YXRhcicpO1xuICAgICAgICAvLyBWZXJpZmlrYXNpIHNyYyBiZXJkYXNhcmthbiBoYXNpbCBkYXJpIGZ1bmdzaSB0aXJ1YW4ga2l0YVxuICAgICAgICBleHBlY3QoYWRhQXZhdGFyKS50b0hhdmVBdHRyaWJ1dGUoJ3NyYycsICdodHRwczovL2kuaW1ndXIuY29tL3JERTJTTDNMYi5qcGcnKTtcbiAgICAgICAgLy8gVmVyaWZpa2FzaSB1a3VyYW5cbiAgICAgICAgZXhwZWN0KGFkYUF2YXRhcikudG9IYXZlQXR0cmlidXRlKCd3aWR0aCcsICcxMDAnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0tyaXRlcmlhIDQ6IExvZ2lrYSB1bnR1ayB1a3VyYW4gZ2FtYmFyIGhhcnVzIGJlbmFyIChzaXplIDwgOTAgdnMgc2l6ZSA+PSA5MCknLCAoKSA9PiB7XG4gICAgICAgIC8vIEtpdGEgYnV0dWggcmVmZXJlbnNpIGtlIGZ1bmdzaSB0aXJ1YW4ga2l0YSB1bnR1ayBtZW1lcmlrc2EgcGFuZ2dpbGFubnlhXG4gICAgICAgIGNvbnN0IHsgZ2V0SW1hZ2VVcmxWMiB9ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXRpbHMuanMnKTtcblxuICAgICAgICAvLyBQYW5nZ2lsIHVsYW5nIHJlbmRlciBkaSBzaW5pIGFnYXIga2l0YSBiaXNhIG1lbWFzdGlrYW4gbW9jay1ueWEgYmVyc2loXG4gICAgICAgIHJlbmRlcig8TXlQcm9maWxlIC8+KTtcblxuICAgICAgICAvLyBDZWsgYmFod2EgdW50dWsgR3JlZ29yaW8gKHNpemUgNDApLCBzaXplIGNvZGUgeWFuZyBkaWtpcmltIGFkYWxhaCAncydcbiAgICAgICAgZXhwZWN0KGdldEltYWdlVXJsVjIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBuYW1lOiAnR3JlZ29yaW8gWS4gWmFyYScgfSksXG4gICAgICAgICAgICAncydcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBDZWsgYmFod2EgdW50dWsgQWRhIChzaXplIDEwMCksIHNpemUgY29kZSB5YW5nIGRpa2lyaW0gYWRhbGFoICdiJ1xuICAgICAgICBleHBlY3QoZ2V0SW1hZ2VVcmxWMikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IG5hbWU6ICdBZGEgTG92ZWxhY2UnIH0pLFxuICAgICAgICAgICAgJ2InXG4gICAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdLcml0ZXJpYSA1OiBLb21wb25lbiBcIk15UHJvZmlsZVwiIGhhcnVzIGRpZXhwb3J0IGRlbmdhbiBiZW5hcicsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KE15UHJvZmlsZSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQU9BO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHNCQUFzQixFQUFFLE9BQU87RUFDdkM7RUFDQTtFQUNBQyxhQUFhLEVBQUVBLENBQUNDLE1BQU0sRUFBRUMsUUFBUSxLQUFLLHVCQUF1QkQsTUFBTSxDQUFDRSxPQUFPLEdBQUdELFFBQVE7QUFDdkYsQ0FBQyxDQUFDLEVBQUU7RUFBRUUsT0FBTyxFQUFFO0FBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFHeEI7QUFDQTtBQUNBO0FBQUEsSUFBQUMsV0FBQSxHQUFBQyxPQUFBO0FBQUEsU0FBQVIsWUFBQTtFQUFBO0lBQUFTO0VBQUEsSUFBQUQsT0FBQTtFQUFBUixXQUFBLEdBQUFBLENBQUEsS0FBQVMsSUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQXRCQTtBQUNBO0FBQ0E7QUFDQUQsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ3BDLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVHLE1BQU07RUFBRUM7QUFBTyxDQUFDLEdBQUdKLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztBQWtCNUQsSUFBSSxDQUFDSyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsZUFBZSxFQUFFO0VBQ2hDLE1BQU0sSUFBSUMsS0FBSyxDQUFDLCtDQUErQyxDQUFDO0FBQ2xFO0FBQ0E7QUFDQSxNQUFNQyxTQUFTLEdBQUdULE9BQU8sQ0FBQ0ssT0FBTyxDQUFDQyxHQUFHLENBQUNDLGVBQWUsQ0FBQyxDQUFDRyxPQUFPOztBQUc5RDtBQUNBO0FBQ0E7QUFDQUMsUUFBUSxDQUFDLDRDQUE0QyxFQUFFLE1BQU07RUFFekRDLFVBQVUsQ0FBQyxNQUFNO0lBQ2I7SUFDQVQsTUFB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