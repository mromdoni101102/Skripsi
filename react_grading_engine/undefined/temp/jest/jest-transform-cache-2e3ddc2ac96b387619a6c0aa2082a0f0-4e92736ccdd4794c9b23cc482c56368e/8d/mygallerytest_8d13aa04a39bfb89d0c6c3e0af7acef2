5de3ff4461d2479c71794fe004d31365
"use strict";

// ======================================================================
// BAGIAN 1: PERSIAPAN LINGKUNGAN (MOCKING YANG TEPAT SASARAN)
// ======================================================================

// Kode jawaban mahasiswa membutuhkan 'getImageUrl' dari path ini.
// Kita harus membuat mock yang ALAMATNYA SAMA PERSIS.
_getJestObj().mock('../../utils/utils.js', () => ({
  // Kita buat fungsi getImageUrl tiruan yang simpel
  getImageUrl: imageId => `https://i.imgur.com/${imageId}s.jpg`
}), {
  virtual: true
});

// ======================================================================
// BAGIAN 2: MENGAMBIL KODE MAHASISWA
// ======================================================================
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen
} = require('@testing-library/react');
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
// Kita ambil komponen MyGallery dari file mahasiswa
const submission = require(process.env.SUBMISSION_PATH);
const MyGallery = submission.MyGallery || submission.default || submission;

// ======================================================================
// BAGIAN 3: "CHECKLIST" PENILAIAN YANG SEBENARNYA
// ======================================================================
describe('Praktikum: Komponen MyGallery', () => {
  // Render komponen mahasiswa sebelum setiap tes
  beforeEach(() => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(MyGallery, {}));
  });
  test('Kriteria 1: Harus menampilkan judul utama "Notable Scientists"', () => {
    // Cari heading <h1> dengan teks yang benar
    const mainHeading = screen.getByRole('heading', {
      level: 1,
      name: /Notable Scientists/i
    });
    expect(mainHeading).toBeInTheDocument();
  });
  test('Kriteria 2: Harus menampilkan DUA nama ilmuwan sebagai sub-judul (di dalam tag <h2>)', () => {
    // Cari heading <h2> dengan nama-nama yang benar
    const mariaHeading = screen.getByRole('heading', {
      level: 2,
      name: /Maria Skłodowska-Curie/i
    });
    const katsukoHeading = screen.getByRole('heading', {
      level: 2,
      name: /Katsuko Saruhashi/i
    });
    expect(mariaHeading).toBeInTheDocument();
    expect(katsukoHeading).toBeInTheDocument();
  });
  test('Kriteria 3: Harus menampilkan gambar avatar dengan SUMBER (src) dan TULISAN ALT yang benar', () => {
    // Cari gambar berdasarkan alt text-nya
    const mariaAvatar = screen.getByAltText('Maria Skłodowska-Curie');
    expect(mariaAvatar).toBeInTheDocument();
    // Periksa apakah src-nya benar (sesuai hasil dari getImageUrl tiruan kita)
    expect(mariaAvatar).toHaveAttribute('src', 'https://i.imgur.com/szV5sdGs.jpg');
    const katsukoAvatar = screen.getByAltText('Katsuko Saruhashi');
    expect(katsukoAvatar).toBeInTheDocument();
    expect(katsukoAvatar).toHaveAttribute('src', 'https://i.imgur.com/YfeOqp2s.jpg');
  });
  test('Kriteria 4: Harus menampilkan detail profesi untuk kedua ilmuwan', () => {
    // Cari teks spesifik yang seharusnya ada
    expect(screen.getByText(/Fisikawan dan kimiawan/i)).toBeInTheDocument();
    expect(screen.getByText(/Ahli Geokimia/i)).toBeInTheDocument();
  });
  test('Kriteria 5: Komponen "MyGallery" harus diexport dengan benar', () => {
    expect(MyGallery).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,