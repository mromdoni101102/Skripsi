66352432d49e64a9b39a70584cff7439
"use strict";

// ======================================================================
// BAGIAN 1: MENYIAPKAN "DATA PALSU" (MOCKING)
// ======================================================================
// Kode mahasiswa membutuhkan data `sculptureList` dari path '@data/article'.
// Kita harus mencegat import ini dan menyediakan data tiruan yang bisa kita kontrol.
_getJestObj().mock('@/data/article', () => ({
  sculptureList: [{
    artist: 'Marta Colvin Andrade',
    title: 'About',
    description: 'Dengan populasi sekitar 2 juta orang...'
  }, {
    artist: 'Eduardo Catalano',
    title: 'Etymology',
    description: 'Nama "Almaty" berasal dari kata...'
  }]
}), {
  virtual: true
});

// ======================================================================
// BAGIAN 2: MENGAMBIL KODE MAHASISWA
// ======================================================================
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen,
  fireEvent
} = require('@testing-library/react');
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
// Mengambil komponen Accordion dari file jawaban mahasiswa.
const Accordion = require(process.env.SUBMISSION_PATH).default;

// ======================================================================
// BAGIAN 3: "CHECKLIST" PENILAIAN FUNGSIONAL
// ======================================================================
describe('Praktikum: Komponen Accordion', () => {
  beforeEach(() => {
    // Render komponen utama sebelum setiap tes
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Accordion, {}));
  });
  test('Kriteria 1: Harus menampilkan judul utama "Almaty, Kazakhstan"', () => {
    expect(screen.getByRole('heading', {
      name: 'Almaty, Kazakhstan'
    })).toBeInTheDocument();
  });
  test('Kriteria 2: Panel pertama ("About") harus aktif dan menampilkan isinya saat awal render', () => {
    // Cari konten dari panel pertama
    const panelContent = screen.getByText(/Dengan populasi sekitar 2 juta orang/i);
    expect(panelContent).toBeInTheDocument();

    // Pastikan tombol "Tampilkan" untuk panel kedua ADA
    const showButtonForPanel2 = screen.getByRole('button', {
      name: 'Tampilkan'
    });
    expect(showButtonForPanel2).toBeInTheDocument();
  });
  test('Kriteria 3: Menekan tombol "Tampilkan" pada panel kedua akan menampilkan isinya', () => {
    const showButton = screen.getByRole('button', {
      name: /Tampilkan/i
    });

    // Klik tombol "Tampilkan" pada panel kedua
    fireEvent.click(showButton);

    // Cari konten dari panel kedua, sekarang seharusnya muncul
    const panel2Content = screen.getByText(/Nama "Almaty" berasal dari kata/i);
    expect(panel2Content).toBeInTheDocument();
  });
  test('Kriteria 4: Saat panel kedua aktif, konten panel pertama harus hilang', () => {
    const showButton = screen.getByRole('button', {
      name: /Tampilkan/i
    });
    fireEvent.click(showButton);

    // Konten panel pertama seharusnya sudah tidak ada lagi di dokumen
    const panel1Content = screen.queryByText(/Dengan populasi sekitar 2 juta orang/i);
    expect(panel1Content).not.toBeInTheDocument();
  });
  test('Kriteria 5: Komponen "Accordion" harus diexport dengan benar', () => {
    expect(Accordion).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJzY3VscHR1cmVMaXN0IiwiYXJ0aXN0IiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInZpcnR1YWwiLCJfanN4UnVudGltZSIsInJlcXVpcmUiLCJqZXN0IiwiUmVhY3QiLCJyZW5kZXIiLCJzY3JlZW4iLCJmaXJlRXZlbnQiLCJwcm9jZXNzIiwiZW52IiwiU1VCTUlTU0lPTl9QQVRIIiwiRXJyb3IiLCJBY2NvcmRpb24iLCJkZWZhdWx0IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwianN4IiwidGVzdCIsImV4cGVjdCIsImdldEJ5Um9sZSIsIm5hbWUiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInBhbmVsQ29udGVudCIsImdldEJ5VGV4dCIsInNob3dCdXR0b25Gb3JQYW5lbDIiLCJzaG93QnV0dG9uIiwiY2xpY2siLCJwYW5lbDJDb250ZW50IiwicGFuZWwxQ29udGVudCIsInF1ZXJ5QnlUZXh0Iiwibm90IiwidG9CZURlZmluZWQiXSwic291cmNlcyI6WyJhY2NvcmRpb24udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBqZXN0LWVudmlyb25tZW50IGpzZG9tXG4gKi9cbnJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nKTtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9ID0gcmVxdWlyZSgnQHRlc3RpbmctbGlicmFyeS9yZWFjdCcpO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBCQUdJQU4gMTogTUVOWUlBUEtBTiBcIkRBVEEgUEFMU1VcIiAoTU9DS0lORylcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEtvZGUgbWFoYXNpc3dhIG1lbWJ1dHVoa2FuIGRhdGEgYHNjdWxwdHVyZUxpc3RgIGRhcmkgcGF0aCAnQGRhdGEvYXJ0aWNsZScuXG4vLyBLaXRhIGhhcnVzIG1lbmNlZ2F0IGltcG9ydCBpbmkgZGFuIG1lbnllZGlha2FuIGRhdGEgdGlydWFuIHlhbmcgYmlzYSBraXRhIGtvbnRyb2wuXG5qZXN0Lm1vY2soJ0AvZGF0YS9hcnRpY2xlJywgKCkgPT4gKHtcbiAgICBzY3VscHR1cmVMaXN0OiBbXG4gICAgICAgIHsgYXJ0aXN0OiAnTWFydGEgQ29sdmluIEFuZHJhZGUnLCB0aXRsZTogJ0Fib3V0JywgZGVzY3JpcHRpb246ICdEZW5nYW4gcG9wdWxhc2kgc2VraXRhciAyIGp1dGEgb3JhbmcuLi4nIH0sXG4gICAgICAgIHsgYXJ0aXN0OiAnRWR1YXJkbyBDYXRhbGFubycsIHRpdGxlOiAnRXR5bW9sb2d5JywgZGVzY3JpcHRpb246ICdOYW1hIFwiQWxtYXR5XCIgYmVyYXNhbCBkYXJpIGthdGEuLi4nIH1cbiAgICBdXG59KSwgeyB2aXJ0dWFsOiB0cnVlIH0pO1xuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJBR0lBTiAyOiBNRU5HQU1CSUwgS09ERSBNQUhBU0lTV0Fcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmlmICghcHJvY2Vzcy5lbnYuU1VCTUlTU0lPTl9QQVRIKSB7XG4gIHRocm93IG5ldyBFcnJvcignU1VCTUlTU0lPTl9QQVRIIGVudmlyb25tZW50IHZhcmlhYmxlIG5vdCBzZXQuJyk7XG59XG4vLyBNZW5nYW1iaWwga29tcG9uZW4gQWNjb3JkaW9uIGRhcmkgZmlsZSBqYXdhYmFuIG1haGFzaXN3YS5cbmNvbnN0IEFjY29yZGlvbiA9IHJlcXVpcmUocHJvY2Vzcy5lbnYuU1VCTUlTU0lPTl9QQVRIKS5kZWZhdWx0O1xuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJBR0lBTiAzOiBcIkNIRUNLTElTVFwiIFBFTklMQUlBTiBGVU5HU0lPTkFMXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5kZXNjcmliZSgnUHJha3Rpa3VtOiBLb21wb25lbiBBY2NvcmRpb24nLCAoKSA9PiB7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgLy8gUmVuZGVyIGtvbXBvbmVuIHV0YW1hIHNlYmVsdW0gc2V0aWFwIHRlc1xuICAgICAgICByZW5kZXIoPEFjY29yZGlvbiAvPik7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdLcml0ZXJpYSAxOiBIYXJ1cyBtZW5hbXBpbGthbiBqdWR1bCB1dGFtYSBcIkFsbWF0eSwgS2F6YWtoc3RhblwiJywgKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnaGVhZGluZycsIHsgbmFtZTogJ0FsbWF0eSwgS2F6YWtoc3RhbicgfSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdLcml0ZXJpYSAyOiBQYW5lbCBwZXJ0YW1hIChcIkFib3V0XCIpIGhhcnVzIGFrdGlmIGRhbiBtZW5hbXBpbGthbiBpc2lueWEgc2FhdCBhd2FsIHJlbmRlcicsICgpID0+IHtcbiAgICAgICAgLy8gQ2FyaSBrb250ZW4gZGFyaSBwYW5lbCBwZXJ0YW1hXG4gICAgICAgIGNvbnN0IHBhbmVsQ29udGVudCA9IHNjcmVlbi5nZXRCeVRleHQoL0RlbmdhbiBwb3B1bGFzaSBzZWtpdGFyIDIganV0YSBvcmFuZy9pKTtcbiAgICAgICAgZXhwZWN0KHBhbmVsQ29udGVudCkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgICAgICAvLyBQYXN0aWthbiB0b21ib2wgXCJUYW1waWxrYW5cIiB1bnR1ayBwYW5lbCBrZWR1YSBBREFcbiAgICAgICAgY29uc3Qgc2hvd0J1dHRvbkZvclBhbmVsMiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogJ1RhbXBpbGthbicgfSk7XG4gICAgICAgIGV4cGVjdChzaG93QnV0dG9uRm9yUGFuZWwyKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnS3JpdGVyaWEgMzogTWVuZWthbiB0b21ib2wgXCJUYW1waWxrYW5cIiBwYWRhIHBhbmVsIGtlZHVhIGFrYW4gbWVuYW1waWxrYW4gaXNpbnlhJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzaG93QnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvVGFtcGlsa2FuL2kgfSk7XG5cbiAgICAgICAgLy8gS2xpayB0b21ib2wgXCJUYW1waWxrYW5cIiBwYWRhIHBhbmVsIGtlZHVhXG4gICAgICAgIGZpcmVFdmVudC5jbGljayhzaG93QnV0dG9uKTtcblxuICAgICAgICAvLyBDYXJpIGtvbnRlbiBkYXJpIHBhbmVsIGtlZHVhLCBzZWthcmFuZyBzZWhhcnVzbnlhIG11bmN1bFxuICAgICAgICBjb25zdCBwYW5lbDJDb250ZW50ID0gc2NyZWVuLmdldEJ5VGV4dCgvTmFtYSBcIkFsbWF0eVwiIGJlcmFzYWwgZGFyaSBrYXRhL2kpO1xuICAgICAgICBleHBlY3QocGFuZWwyQ29udGVudCkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0tyaXRlcmlhIDQ6IFNhYXQgcGFuZWwga2VkdWEgYWt0aWYsIGtvbnRlbiBwYW5lbCBwZXJ0YW1hIGhhcnVzIGhpbGFuZycsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2hvd0J1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL1RhbXBpbGthbi9pIH0pO1xuICAgICAgICBmaXJlRXZlbnQuY2xpY2soc2hvd0J1dHRvbik7XG5cbiAgICAgICAgLy8gS29udGVuIHBhbmVsIHBlcnRhbWEgc2VoYXJ1c255YSBzdWRhaCB0aWRhayBhZGEgbGFnaSBkaSBkb2t1bWVuXG4gICAgICAgIGNvbnN0IHBhbmVsMUNvbnRlbnQgPSBzY3JlZW4ucXVlcnlCeVRleHQoL0RlbmdhbiBwb3B1bGFzaSBzZWtpdGFyIDIganV0YSBvcmFuZy9pKTtcbiAgICAgICAgZXhwZWN0KHBhbmVsMUNvbnRlbnQpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnS3JpdGVyaWEgNTogS29tcG9uZW4gXCJBY2NvcmRpb25cIiBoYXJ1cyBkaWV4cG9ydCBkZW5nYW4gYmVuYXInLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChBY2NvcmRpb24pLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQU87RUFDL0JDLGFBQWEsRUFBRSxDQUNYO0lBQUVDLE1BQU0sRUFBRSxzQkFBc0I7SUFBRUMsS0FBSyxFQUFFLE9BQU87SUFBRUMsV0FBVyxFQUFFO0VBQTBDLENBQUMsRUFDMUc7SUFBRUYsTUFBTSxFQUFFLGtCQUFrQjtJQUFFQyxLQUFLLEVBQUUsV0FBVztJQUFFQyxXQUFXLEVBQUU7RUFBcUMsQ0FBQztBQUU3RyxDQUFDLENBQUMsRUFBRTtFQUFFQyxPQUFPLEVBQUU7QUFBSyxDQUFDLENBQUM7O0FBR3RCO0FBQ0E7QUFDQTtBQUFBLElBQUFDLFdBQUEsR0FBQUMsT0FBQTtBQUFBLFNBQUFSLFlBQUE7RUFBQTtJQUFBUztFQUFBLElBQUFELE9BQUE7RUFBQVIsV0FBQSxHQUFBQSxDQUFBLEtBQUFTLElBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUF0QkE7QUFDQTtBQUNBO0FBQ0FELE9BQU8sQ0FBQywyQkFBMkIsQ0FBQztBQUNwQyxNQUFNRSxLQUFLLEdBQUdGLE9B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