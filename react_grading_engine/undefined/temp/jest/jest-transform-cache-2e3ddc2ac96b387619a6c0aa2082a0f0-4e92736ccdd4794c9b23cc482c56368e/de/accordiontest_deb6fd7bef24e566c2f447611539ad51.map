{"version":3,"names":["_getJestObj","mock","sculptureList","artist","title","description","virtual","_jsxRuntime","require","jest","React","render","screen","fireEvent","process","env","SUBMISSION_PATH","Error","Accordion","default","describe","beforeEach","jsx","test","expect","getByRole","name","toBeInTheDocument","panelContent","getByText","showButtonForPanel2","showButton","click","panel2Content","panel1Content","queryByText","not","toBeDefined"],"sources":["accordion.test.js"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\nrequire('@testing-library/jest-dom');\nconst React = require('react');\nconst { render, screen, fireEvent } = require('@testing-library/react');\n\n// ======================================================================\n// BAGIAN 1: MENYIAPKAN \"DATA PALSU\" (MOCKING)\n// ======================================================================\n// Kode mahasiswa membutuhkan data `sculptureList` dari path '@data/article'.\n// Kita harus mencegat import ini dan menyediakan data tiruan yang bisa kita kontrol.\njest.mock('@/data/article', () => ({\n    sculptureList: [\n        { artist: 'Marta Colvin Andrade', title: 'About', description: 'Dengan populasi sekitar 2 juta orang...' },\n        { artist: 'Eduardo Catalano', title: 'Etymology', description: 'Nama \"Almaty\" berasal dari kata...' }\n    ]\n}), { virtual: true });\n\n\n// ======================================================================\n// BAGIAN 2: MENGAMBIL KODE MAHASISWA\n// ======================================================================\nif (!process.env.SUBMISSION_PATH) {\n  throw new Error('SUBMISSION_PATH environment variable not set.');\n}\n// Mengambil komponen Accordion dari file jawaban mahasiswa.\nconst Accordion = require(process.env.SUBMISSION_PATH).default;\n\n\n// ======================================================================\n// BAGIAN 3: \"CHECKLIST\" PENILAIAN FUNGSIONAL\n// ======================================================================\ndescribe('Praktikum: Komponen Accordion', () => {\n\n    beforeEach(() => {\n        // Render komponen utama sebelum setiap tes\n        render(<Accordion />);\n    });\n\n    test('Kriteria 1: Harus menampilkan judul utama \"Almaty, Kazakhstan\"', () => {\n        expect(screen.getByRole('heading', { name: 'Almaty, Kazakhstan' })).toBeInTheDocument();\n    });\n\n    test('Kriteria 2: Panel pertama (\"About\") harus aktif dan menampilkan isinya saat awal render', () => {\n        // Cari konten dari panel pertama\n        const panelContent = screen.getByText(/Dengan populasi sekitar 2 juta orang/i);\n        expect(panelContent).toBeInTheDocument();\n\n        // Pastikan tombol \"Tampilkan\" untuk panel kedua ADA\n        const showButtonForPanel2 = screen.getByRole('button', { name: 'Tampilkan' });\n        expect(showButtonForPanel2).toBeInTheDocument();\n    });\n\n    test('Kriteria 3: Menekan tombol \"Tampilkan\" pada panel kedua akan menampilkan isinya', () => {\n        const showButton = screen.getByRole('button', { name: /Tampilkan/i });\n\n        // Klik tombol \"Tampilkan\" pada panel kedua\n        fireEvent.click(showButton);\n\n        // Cari konten dari panel kedua, sekarang seharusnya muncul\n        const panel2Content = screen.getByText(/Nama \"Almaty\" berasal dari kata/i);\n        expect(panel2Content).toBeInTheDocument();\n    });\n\n    test('Kriteria 4: Saat panel kedua aktif, konten panel pertama harus hilang', () => {\n        const showButton = screen.getByRole('button', { name: /Tampilkan/i });\n        fireEvent.click(showButton);\n\n        // Konten panel pertama seharusnya sudah tidak ada lagi di dokumen\n        const panel1Content = screen.queryByText(/Dengan populasi sekitar 2 juta orang/i);\n        expect(panel1Content).not.toBeInTheDocument();\n    });\n\n    test('Kriteria 5: Komponen \"Accordion\" harus diexport dengan benar', () => {\n        expect(Accordion).toBeDefined();\n    });\n});\n"],"mappings":";;AAOA;AACA;AACA;AACA;AACA;AACAA,WAAA,GAAKC,IAAI,CAAC,gBAAgB,EAAE,OAAO;EAC/BC,aAAa,EAAE,CACX;IAAEC,MAAM,EAAE,sBAAsB;IAAEC,KAAK,EAAE,OAAO;IAAEC,WAAW,EAAE;EAA0C,CAAC,EAC1G;IAAEF,MAAM,EAAE,kBAAkB;IAAEC,KAAK,EAAE,WAAW;IAAEC,WAAW,EAAE;EAAqC,CAAC;AAE7G,CAAC,CAAC,EAAE;EAAEC,OAAO,EAAE;AAAK,CAAC,CAAC;;AAGtB;AACA;AACA;AAAA,IAAAC,WAAA,GAAAC,OAAA;AAAA,SAAAR,YAAA;EAAA;IAAAS;EAAA,IAAAD,OAAA;EAAAR,WAAA,GAAAA,CAAA,KAAAS,IAAA;EAAA,OAAAA,IAAA;AAAA;AAtBA;AACA;AACA;AACAD,OAAO,CAAC,2BAA2B,CAAC;AACpC,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAM;EAAEG,MAAM;EAAEC,MAAM;EAAEC;AAAU,CAAC,GAAGL,OAAO,CAAC,wBAAwB,CAAC;AAkBvE,IAAI,CAACM,OAAO,CAACC,GAAG,CAACC,eAAe,EAAE;EAChC,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;AAClE;AACA;AACA,MAAMC,SAAS,GAAGV,OAAO,CAACM,OAAO,CAACC,GAAG,CAACC,eAAe,CAAC,CAACG,OAAO;;AAG9D;AACA;AACA;AACAC,QAAQ,CAAC,+BAA+B,EAAE,MAAM;EAE5CC,UAAU,CAAC,MAAM;IACb;IACAV,MAAM,cAAC,IAAAJ,WAAA,CAAAe,GAAA,EAACJ,SAAS,IAAE,CAAC,CAAC;EACzB,CAAC,CAAC;EAEFK,IAAI,CAAC,gEAAgE,EAAE,MAAM;IACzEC,MAAM,CAACZ,MAAM,CAACa,SAAS,CAAC,SAAS,EAAE;MAAEC,IAAI,EAAE;IAAqB,CAAC,CAAC,CAAC,CAACC,iBAAiB,CAAC,CAAC;EAC3F,CAAC,CAAC;EAEFJ,IAAI,CAAC,yFAAyF,EAAE,MAAM;IAClG;IACA,MAAMK,YAAY,GAAGhB,MAAM,CAACiB,SAAS,CAAC,uCAAuC,CAAC;IAC9EL,MAAM,CAACI,YAAY,CAAC,CAACD,iBAAiB,CAAC,CAAC;;IAExC;IACA,MAAMG,mBAAmB,GAAGlB,MAAM,CAACa,SAAS,CAAC,QAAQ,EAAE;MAAEC,IAAI,EAAE;IAAY,CAAC,CAAC;IAC7EF,MAAM,CAACM,mBAAmB,CAAC,CAACH,iBAAiB,CAAC,CAAC;EACnD,CAAC,CAAC;EAEFJ,IAAI,CAAC,iFAAiF,EAAE,MAAM;IAC1F,MAAMQ,UAAU,GAAGnB,MAAM,CAACa,SAAS,CAAC,QAAQ,EAAE;MAAEC,IAAI,EAAE;IAAa,CAAC,CAAC;;IAErE;IACAb,SAAS,CAACmB,KAAK,CAACD,UAAU,CAAC;;IAE3B;IACA,MAAME,aAAa,GAAGrB,MAAM,CAACiB,SAAS,CAAC,kCAAkC,CAAC;IAC1EL,MAAM,CAACS,aAAa,CAAC,CAACN,iBAAiB,CAAC,CAAC;EAC7C,CAAC,CAAC;EAEFJ,IAAI,CAAC,uEAAuE,EAAE,MAAM;IAChF,MAAMQ,UAAU,GAAGnB,MAAM,CAACa,SAAS,CAAC,QAAQ,EAAE;MAAEC,IAAI,EAAE;IAAa,CAAC,CAAC;IACrEb,SAAS,CAACmB,KAAK,CAACD,UAAU,CAAC;;IAE3B;IACA,MAAMG,aAAa,GAAGtB,MAAM,CAACuB,WAAW,CAAC,uCAAuC,CAAC;IACjFX,MAAM,CAACU,aAAa,CAAC,CAACE,GAAG,CAACT,iBAAiB,CAAC,CAAC;EACjD,CAAC,CAAC;EAEFJ,IAAI,CAAC,8DAA8D,EAAE,MAAM;IACvEC,MAAM,CAACN,SAAS,CAAC,CAACmB,WAAW,CAAC,CAAC;EACnC,CAAC,CAAC;AACN,CAAC,CAAC","ignoreList":[]}