b48315711ea3e40513597ed0c01f446b
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen
} = require('@testing-library/react');

// ======================================================================
// TIDAK ADA MOCKING DEPENDENSI KARENA KODE INI MANDIRI
// ======================================================================

// ======================================================================
// BAGIAN 2: MENGAMBIL KODE MAHASISWA
// ======================================================================
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
// Mengambil komponen utama dari file jawaban mahasiswa.
const Tantangan2 = require(process.env.SUBMISSION_PATH).default;

// ======================================================================
// BAGIAN 3: "CHECKLIST" PENILAIAN FUNGSIONAL
// ======================================================================
describe('Praktikum: Komponen PackingList (Tantangan 2)', () => {
  beforeEach(() => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Tantangan2, {}));
  });
  test('Kriteria 1: Harus menampilkan judul utama "Sally Ride\'s Packing List"', () => {
    const heading = screen.getByRole('heading', {
      level: 1,
      name: /Sally Ride's Packing List/i
    });
    expect(heading).toBeInTheDocument();
  });
  test('Kriteria 2: Harus me-render sebuah daftar (<ul>) dengan tepat 3 item (<li>)', () => {
    const list = screen.getByRole('list');
    expect(list).toBeInTheDocument();
    const listItems = screen.getAllByRole('listitem');
    expect(listItems).toHaveLength(3);
  });
  test('Kriteria 3: Item dengan importance > 0 harus menampilkan teks importance', () => {
    // Cari item berdasarkan teksnya dan pastikan teks importance muncul
    const spaceSuit = screen.getByText(/Space suit/i);
    expect(spaceSuit).toHaveTextContent('(Importance: 9)');
    const photo = screen.getByText(/Photo of Tam/i);
    expect(photo).toHaveTextContent('(Importance: 6)');
  });
  test('Kriteria 4: Item dengan importance = 0 TIDAK boleh menampilkan teks importance', () => {
    // Cari item berdasarkan teksnya
    const helmet = screen.getByText(/Helmet with a golden leaf/i);

    // Pastikan tidak ada teks "Importance" pada item ini
    expect(helmet).not.toHaveTextContent('Importance');
  });
  test('Kriteria 5: Teks importance harus berada di dalam tag <i> (italic)', () => {
    // Cari semua elemen <i>, seharusnya ada 2
    const italicElements = screen.getAllByRole('generic', {
      name: ''
    }).filter(el => el.tagName.toLowerCase() === 'i');
    expect(italicElements).toHaveLength(2);

    // Periksa isinya
    expect(screen.getByText('(Importance: 9)')).toBeInTheDocument();
    expect(screen.getByText('(Importance: 6)')).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiUmVhY3QiLCJyZW5kZXIiLCJzY3JlZW4iLCJwcm9jZXNzIiwiZW52IiwiU1VCTUlTU0lPTl9QQVRIIiwiRXJyb3IiLCJUYW50YW5nYW4yIiwiZGVmYXVsdCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsIl9qc3hSdW50aW1lIiwianN4IiwidGVzdCIsImhlYWRpbmciLCJnZXRCeVJvbGUiLCJsZXZlbCIsIm5hbWUiLCJleHBlY3QiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImxpc3QiLCJsaXN0SXRlbXMiLCJnZXRBbGxCeVJvbGUiLCJ0b0hhdmVMZW5ndGgiLCJzcGFjZVN1aXQiLCJnZXRCeVRleHQiLCJ0b0hhdmVUZXh0Q29udGVudCIsInBob3RvIiwiaGVsbWV0Iiwibm90IiwiaXRhbGljRWxlbWVudHMiLCJmaWx0ZXIiLCJlbCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VzIjpbInRhbnRhbmdhbjIudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBqZXN0LWVudmlyb25tZW50IGpzZG9tXG4gKi9cbnJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nKTtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgcmVuZGVyLCBzY3JlZW4gfSA9IHJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnKTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVElEQUsgQURBIE1PQ0tJTkcgREVQRU5ERU5TSSBLQVJFTkEgS09ERSBJTkkgTUFORElSSVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJBR0lBTiAyOiBNRU5HQU1CSUwgS09ERSBNQUhBU0lTV0Fcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmlmICghcHJvY2Vzcy5lbnYuU1VCTUlTU0lPTl9QQVRIKSB7XG4gIHRocm93IG5ldyBFcnJvcignU1VCTUlTU0lPTl9QQVRIIGVudmlyb25tZW50IHZhcmlhYmxlIG5vdCBzZXQuJyk7XG59XG4vLyBNZW5nYW1iaWwga29tcG9uZW4gdXRhbWEgZGFyaSBmaWxlIGphd2FiYW4gbWFoYXNpc3dhLlxuY29uc3QgVGFudGFuZ2FuMiA9IHJlcXVpcmUocHJvY2Vzcy5lbnYuU1VCTUlTU0lPTl9QQVRIKS5kZWZhdWx0O1xuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJBR0lBTiAzOiBcIkNIRUNLTElTVFwiIFBFTklMQUlBTiBGVU5HU0lPTkFMXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5kZXNjcmliZSgnUHJha3Rpa3VtOiBLb21wb25lbiBQYWNraW5nTGlzdCAoVGFudGFuZ2FuIDIpJywgKCkgPT4ge1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIHJlbmRlcig8VGFudGFuZ2FuMiAvPik7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdLcml0ZXJpYSAxOiBIYXJ1cyBtZW5hbXBpbGthbiBqdWR1bCB1dGFtYSBcIlNhbGx5IFJpZGVcXCdzIFBhY2tpbmcgTGlzdFwiJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBoZWFkaW5nID0gc2NyZWVuLmdldEJ5Um9sZSgnaGVhZGluZycsIHsgbGV2ZWw6IDEsIG5hbWU6IC9TYWxseSBSaWRlJ3MgUGFja2luZyBMaXN0L2kgfSk7XG4gICAgICAgIGV4cGVjdChoZWFkaW5nKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnS3JpdGVyaWEgMjogSGFydXMgbWUtcmVuZGVyIHNlYnVhaCBkYWZ0YXIgKDx1bD4pIGRlbmdhbiB0ZXBhdCAzIGl0ZW0gKDxsaT4pJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBsaXN0ID0gc2NyZWVuLmdldEJ5Um9sZSgnbGlzdCcpO1xuICAgICAgICBleHBlY3QobGlzdCkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgICAgICBjb25zdCBsaXN0SXRlbXMgPSBzY3JlZW4uZ2V0QWxsQnlSb2xlKCdsaXN0aXRlbScpO1xuICAgICAgICBleHBlY3QobGlzdEl0ZW1zKS50b0hhdmVMZW5ndGgoMyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdLcml0ZXJpYSAzOiBJdGVtIGRlbmdhbiBpbXBvcnRhbmNlID4gMCBoYXJ1cyBtZW5hbXBpbGthbiB0ZWtzIGltcG9ydGFuY2UnLCAoKSA9PiB7XG4gICAgICAgIC8vIENhcmkgaXRlbSBiZXJkYXNhcmthbiB0ZWtzbnlhIGRhbiBwYXN0aWthbiB0ZWtzIGltcG9ydGFuY2UgbXVuY3VsXG4gICAgICAgIGNvbnN0IHNwYWNlU3VpdCA9IHNjcmVlbi5nZXRCeVRleHQoL1NwYWNlIHN1aXQvaSk7XG4gICAgICAgIGV4cGVjdChzcGFjZVN1aXQpLnRvSGF2ZVRleHRDb250ZW50KCcoSW1wb3J0YW5jZTogOSknKTtcblxuICAgICAgICBjb25zdCBwaG90byA9IHNjcmVlbi5nZXRCeVRleHQoL1Bob3RvIG9mIFRhbS9pKTtcbiAgICAgICAgZXhwZWN0KHBob3RvKS50b0hhdmVUZXh0Q29udGVudCgnKEltcG9ydGFuY2U6IDYpJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdLcml0ZXJpYSA0OiBJdGVtIGRlbmdhbiBpbXBvcnRhbmNlID0gMCBUSURBSyBib2xlaCBtZW5hbXBpbGthbiB0ZWtzIGltcG9ydGFuY2UnLCAoKSA9PiB7XG4gICAgICAgIC8vIENhcmkgaXRlbSBiZXJkYXNhcmthbiB0ZWtzbnlhXG4gICAgICAgIGNvbnN0IGhlbG1ldCA9IHNjcmVlbi5nZXRCeVRleHQoL0hlbG1ldCB3aXRoIGEgZ29sZGVuIGxlYWYvaSk7XG5cbiAgICAgICAgLy8gUGFzdGlrYW4gdGlkYWsgYWRhIHRla3MgXCJJbXBvcnRhbmNlXCIgcGFkYSBpdGVtIGluaVxuICAgICAgICBleHBlY3QoaGVsbWV0KS5ub3QudG9IYXZlVGV4dENvbnRlbnQoJ0ltcG9ydGFuY2UnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0tyaXRlcmlhIDU6IFRla3MgaW1wb3J0YW5jZSBoYXJ1cyBiZXJhZGEgZGkgZGFsYW0gdGFnIDxpPiAoaXRhbGljKScsICgpID0+IHtcbiAgICAgICAgLy8gQ2FyaSBzZW11YSBlbGVtZW4gPGk+LCBzZWhhcnVzbnlhIGFkYSAyXG4gICAgICAgIGNvbnN0IGl0YWxpY0VsZW1lbnRzID0gc2NyZWVuLmdldEFsbEJ5Um9sZSgnZ2VuZXJpYycsIHsgbmFtZTogJycgfSkuZmlsdGVyKGVsID0+IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2knKTtcbiAgICAgICAgZXhwZWN0KGl0YWxpY0VsZW1lbnRzKS50b0hhdmVMZW5ndGgoMik7XG5cbiAgICAgICAgLy8gUGVyaWtzYSBpc2lueWFcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJyhJbXBvcnRhbmNlOiA5KScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnKEltcG9ydGFuY2U6IDYpJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQUEsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ3BDLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVFLE1BQU07RUFBRUM7QUFBTyxDQUFDLEdBQUdILE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQzs7QUFFNUQ7QUFDQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTtBQUNBLElBQUksQ0FBQ0ksT0FBTyxDQUFDQyxHQUFHLENBQUNDLGVBQWUsRUFBRTtFQUNoQyxNQUFNLElBQUlDLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQztBQUNsRTtBQUNBO0FBQ0EsTUFBTUMsVUFBVSxHQUFHUixPQUFPLENBQUNJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxlQUFlLENBQUMsQ0FBQ0csT0FBTzs7QUFHL0Q7QUFDQTtBQUNBO0FBQ0FDLFFBQVEsQ0FBQywrQ0FBK0MsRUFBRSxNQUFNO0VBRTVEQyxVQUFVLENBQUMsTUFBTTtJQUNiVCxNQUFNLGNBQUMsSUFBQVUsV0FBQSxDQUFBQyxHQUFBLEVBQUNMLFVBQVUsSUFBRSxDQUFDLENBQUM7RUFDMUIsQ0FBQyxDQUFDO0VBRUZNLElBQUksQ0FBQyx3RUFBd0UsRUFBRSxNQUFNO0lBQ2pGLE1BQU1DLE9BQU8sR0FBR1osTUFBTSxDQUFDYSxTQUFTLENBQUMsU0FBUyxFQUFFO01BQUVDLEtBQUssRUFBRSxDQUFDO01BQUVDLElBQUksRUFBRTtJQUE2QixDQUFDLENBQUM7SUFDN0ZDLE1BQU0sQ0FBQ0osT0FBTyxDQUFDLENBQUNLLGlCQUFpQixDQUFDLENBQUM7RUFDdkMsQ0FBQyxDQUFDO0VBRUZOLElBQUksQ0FBQyw2RUFBNkUsRUFBRSxNQUFNO0lBQ3RGLE1BQU1PLElBQUksR0FBR2xCLE1BQU0sQ0FBQ2EsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUNyQ0csTUFBTSxDQUFDRSxJQUFJLENBQUMsQ0FBQ0QsaUJBQWlCLENBQUMsQ0FBQztJQUVoQyxNQUFNRSxTQUFTLEdBQUduQixNQUFNLENBQUNvQixZQUFZLENBQUMsVUFBVSxDQUFDO0lBQ2pESixNQUFNLENBQUNHLFNBQVMsQ0FBQyxDQUFDRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0VBQ3JDLENBQUMsQ0FBQztFQUVGVixJQUFJLENBQUMsMEVBQTBFLEVBQUUsTUFBTTtJQUNuRjtJQUNBLE1BQU1XLFNBQVMsR0FBR3RCLE1BQU0sQ0FBQ3VCLFNBQVMsQ0FBQyxhQUFhLENBQUM7SUFDakRQLE1BQU0sQ0FBQ00sU0FBUyxDQUFDLENBQUNFLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDO0lBRXRELE1BQU1DLEtBQUssR0FBR3pCLE1BQU0sQ0FBQ3VCLFNBQVMsQ0FBQyxlQUFlLENBQUM7SUFDL0NQLE1BQU0sQ0FBQ1MsS0FBSyxDQUFDLENBQUNELGlCQUFpQixDQUFDLGlCQUFpQixDQUFDO0VBQ3RELENBQUMsQ0FBQztFQUVGYixJQUFJLENBQUMsZ0ZBQWdGLEVBQUUsTUFBTTtJQUN6RjtJQUNBLE1BQU1lLE1BQU0sR0FBRzFCLE1BQU0sQ0FBQ3VCLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQzs7SUFFN0Q7SUFDQVAsTUFBTSxDQUFDVSxNQUFNLENBQUMsQ0FBQ0MsR0FBRyxDQUFDSCxpQkFBaUIsQ0FBQyxZQUFZLENBQUM7RUFDdEQsQ0FBQyxDQUFDO0VBRUZiLElBQUksQ0FBQyxvRUFBb0UsRUFBRSxNQUFNO0lBQzdFO0lBQ0EsTUFBTWlCLGNBQWMsR0FBRzVCLE1BQU0sQ0FBQ29CLFlBQVksQ0FBQyxTQUFTLEVBQUU7TUFBRUwsSUFBSSxFQUFFO0lBQUcsQ0FBQyxDQUFDLENBQUNjLE1BQU0sQ0FBQ0MsRUFBRSxJQUFJQSxFQUFFLENBQUNDLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUM7SUFDbEhoQixNQUFNLENBQUNZLGNBQWMsQ0FBQyxDQUFDUCxZQUFZLENBQUMsQ0FBQyxDQUFDOztJQUV0QztJQUNBTCxNQUFNLENBQUNoQixNQUFNLENBQUN1QixTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDTixpQkFBaUIsQ0FBQyxDQUFDO0lBQy9ERCxNQUFNLENBQUNoQixNQUFNLENBQUN1QixTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDTixpQkFBaUIsQ0FBQyxDQUFDO0VBQ25FLENBQUMsQ0FBQztBQUVOLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==