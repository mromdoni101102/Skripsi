{"version":3,"names":["_getJestObj","mock","getImageUrlV2","person","sizeCode","imageId","virtual","_jsxRuntime","require","jest","React","render","screen","process","env","SUBMISSION_PATH","Error","MyProfile","default","describe","beforeEach","jsx","test","avatars","getAllByRole","expect","toHaveLength","gregorioAvatar","getByAltText","toBeInTheDocument","toHaveClass","toHaveAttribute","adaAvatar","toBeDefined"],"sources":["myprofile.test.js"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\nrequire('@testing-library/jest-dom');\nconst React = require('react');\nconst { render, screen } = require('@testing-library/react');\n\n// ======================================================================\n// BAGIAN 1: PERSIAPAN LINGKUNGAN (MOCKING FUNGSI getImageUrlV2)\n// ======================================================================\n\n// Ini adalah bagian terpenting. Kita beritahu Jest untuk mencegat TEPAT\n// alamat yang diminta oleh kode mahasiswa.\njest.mock('../../utils/utils.js', () => ({\n  // Sebagai gantinya, berikan fungsi getImageUrlV2 tiruan yang simpel ini.\n  // Fungsi ini akan selalu mengembalikan URL yang bisa kita prediksi.\n  getImageUrlV2: (person, sizeCode) => `https://i.imgur.com/${person.imageId}${sizeCode}.jpg`,\n}), { virtual: true }); // virtual: true membuatnya tidak perlu file fisik sama sekali.\n\n\n// ======================================================================\n// BAGIAN 2: MENGAMBIL KODE MAHASISWA\n// ======================================================================\nif (!process.env.SUBMISSION_PATH) {\n  throw new Error('SUBMISSION_PATH environment variable not set.');\n}\n// Mengambil komponen MyProfile dari file jawaban mahasiswa.\nconst MyProfile = require(process.env.SUBMISSION_PATH).default;\n\n\n// ======================================================================\n// BAGIAN 3: \"CHECKLIST\" PENILAIAN FUNGSIONAL UNTUK MYPROFILE\n// ======================================================================\ndescribe('Praktikum: Komponen MyProfile dan MyAvatar', () => {\n\n  beforeEach(() => {\n    // Render komponen mahasiswa sebelum setiap tes\n    render(<MyProfile />);\n  });\n\n  test('Kriteria 1: Harus me-render DUA gambar avatar', () => {\n    // Cari semua elemen dengan peran 'img'\n    const avatars = screen.getAllByRole('img');\n    expect(avatars).toHaveLength(2);\n  });\n\n  test('Kriteria 2: Avatar Gregorio Y. Zara harus memiliki atribut yang benar', () => {\n    // Cari gambar berdasarkan teks alternatifnya\n    const gregorioAvatar = screen.getByAltText('Gregorio Y. Zara');\n    expect(gregorioAvatar).toBeInTheDocument();\n    expect(gregorioAvatar).toHaveClass('avatar');\n    // Verifikasi src berdasarkan hasil dari fungsi tiruan kita\n    expect(gregorioAvatar).toHaveAttribute('src', 'https://i.imgur.com/7vQD0fPs.jpg');\n    // Verifikasi ukuran\n    expect(gregorioAvatar).toHaveAttribute('width', '40');\n  });\n\n  test('Kriteria 3: Avatar Ada Lovelace harus memiliki atribut yang benar', () => {\n    // Cari gambar berdasarkan teks alternatifnya\n    const adaAvatar = screen.getByAltText('Ada Lovelace');\n    expect(adaAvatar).toBeInTheDocument();\n    expect(adaAvatar).toHaveClass('avatar');\n    // Verifikasi src berdasarkan hasil dari fungsi tiruan kita\n    expect(adaAvatar).toHaveAttribute('src', 'https://i.imgur.com/rDE2SL3Lb.jpg');\n    // Verifikasi ukuran\n    expect(adaAvatar).toHaveAttribute('width', '100');\n  });\n\n  test('Kriteria 4: Komponen \"MyProfile\" harus diexport dengan benar', () => {\n      expect(MyProfile).toBeDefined();\n  });\n\n});\n"],"mappings":";;AAOA;AACA;AACA;;AAEA;AACA;AACAA,WAAA,GAAKC,IAAI,CAAC,sBAAsB,EAAE,OAAO;EACvC;EACA;EACAC,aAAa,EAAEA,CAACC,MAAM,EAAEC,QAAQ,KAAK,uBAAuBD,MAAM,CAACE,OAAO,GAAGD,QAAQ;AACvF,CAAC,CAAC,EAAE;EAAEE,OAAO,EAAE;AAAK,CAAC,CAAC,CAAC,CAAC;;AAGxB;AACA;AACA;AAAA,IAAAC,WAAA,GAAAC,OAAA;AAAA,SAAAR,YAAA;EAAA;IAAAS;EAAA,IAAAD,OAAA;EAAAR,WAAA,GAAAA,CAAA,KAAAS,IAAA;EAAA,OAAAA,IAAA;AAAA;AAtBA;AACA;AACA;AACAD,OAAO,CAAC,2BAA2B,CAAC;AACpC,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAM;EAAEG,MAAM;EAAEC;AAAO,CAAC,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AAkB5D,IAAI,CAACK,OAAO,CAACC,GAAG,CAACC,eAAe,EAAE;EAChC,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;AAClE;AACA;AACA,MAAMC,SAAS,GAAGT,OAAO,CAACK,OAAO,CAACC,GAAG,CAACC,eAAe,CAAC,CAACG,OAAO;;AAG9D;AACA;AACA;AACAC,QAAQ,CAAC,4CAA4C,EAAE,MAAM;EAE3DC,UAAU,CAAC,MAAM;IACf;IACAT,MAAM,cAAC,IAAAJ,WAAA,CAAAc,GAAA,EAACJ,SAAS,IAAE,CAAC,CAAC;EACvB,CAAC,CAAC;EAEFK,IAAI,CAAC,+CAA+C,EAAE,MAAM;IAC1D;IACA,MAAMC,OAAO,GAAGX,MAAM,CAACY,YAAY,CAAC,KAAK,CAAC;IAC1CC,MAAM,CAACF,OAAO,CAAC,CAACG,YAAY,CAAC,CAAC,CAAC;EACjC,CAAC,CAAC;EAEFJ,IAAI,CAAC,uEAAuE,EAAE,MAAM;IAClF;IACA,MAAMK,cAAc,GAAGf,MAAM,CAACgB,YAAY,CAAC,kBAAkB,CAAC;IAC9DH,MAAM,CAACE,cAAc,CAAC,CAACE,iBAAiB,CAAC,CAAC;IAC1CJ,MAAM,CAACE,cAAc,CAAC,CAACG,WAAW,CAAC,QAAQ,CAAC;IAC5C;IACAL,MAAM,CAACE,cAAc,CAAC,CAACI,eAAe,CAAC,KAAK,EAAE,kCAAkC,CAAC;IACjF;IACAN,MAAM,CAACE,cAAc,CAAC,CAACI,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC;EACvD,CAAC,CAAC;EAEFT,IAAI,CAAC,mEAAmE,EAAE,MAAM;IAC9E;IACA,MAAMU,SAAS,GAAGpB,MAAM,CAACgB,YAAY,CAAC,cAAc,CAAC;IACrDH,MAAM,CAACO,SAAS,CAAC,CAACH,iBAAiB,CAAC,CAAC;IACrCJ,MAAM,CAACO,SAAS,CAAC,CAACF,WAAW,CAAC,QAAQ,CAAC;IACvC;IACAL,MAAM,CAACO,SAAS,CAAC,CAACD,eAAe,CAAC,KAAK,EAAE,mCAAmC,CAAC;IAC7E;IACAN,MAAM,CAACO,SAAS,CAAC,CAACD,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC;EACnD,CAAC,CAAC;EAEFT,IAAI,CAAC,8DAA8D,EAAE,MAAM;IACvEG,MAAM,CAACR,SAAS,CAAC,CAACgB,WAAW,CAAC,CAAC;EACnC,CAAC,CAAC;AAEJ,CAAC,CAAC","ignoreList":[]}