cee516883a4909e04178f941ab5a7fb4
"use strict";

// ======================================================================
// BAGIAN 1: PERSIAPAN LINGKUNGAN
// ======================================================================

// Mocking (membuat tiruan) dari komponen 'next/image'.
// Ini diperlukan karena kita menjalankan tes di luar lingkungan Next.js.
_getJestObj().mock('next/image', () => {
  // eslint-disable-next-line @next/next/no-img-element
  return props => /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
    ...props
  });
});

// ======================================================================
// BAGIAN 2: MENGAMBIL KODE MAHASISWA (Satu-satunya yang di-import)
// ======================================================================

// PENTING: Kode ini secara dinamis mengimpor file mahasiswa yang di-upload.
// Path-nya dikirim oleh Controller Laravel melalui environment variable.
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen
} = require('@testing-library/react');
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
const submission = require(process.env.SUBMISSION_PATH);
const TodoList = submission.TodoList || submission.default || submission;

// ======================================================================
// BAGIAN 3: "CHECKLIST" PENILAIAN FUNGSIONAL
// ======================================================================

// Ini adalah inti dari "kunci jawaban" Anda.
// Setiap 'test' adalah satu kriteria penilaian yang akan menghasilkan LULUS atau GAGAL.
describe('Praktikum: Komponen TodoList', () => {
  // Fungsi ini akan dijalankan sebelum setiap 'test' di bawah ini.
  // Tujuannya agar kita tidak perlu menulis `render(<TodoList />)` berulang kali.
  beforeEach(() => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(TodoList, {}));
  });

  // Tes yang baru (lebih andal)
  test('Kriteria 1: Harus menampilkan heading dengan nama person yang benar', () => {
    // Kita cari heading level 1 yang memiliki teks LENGKAP yang kita inginkan.
    // Ini akan memastikan ia menemukan satu heading utuh.
    const heading = screen.getByRole('heading', {
      level: 1,
      name: "Gregorio Y. Zara's Todos"
    });
    expect(heading).toBeInTheDocument();
  });
  test('Kriteria 2: Harus menampilkan sebuah elemen gambar (avatar)', () => {
    const avatar = screen.getByRole('img');
    expect(avatar).toBeInTheDocument();
  });
  test('Kriteria 3: Gambar avatar harus memiliki sumber (src) yang benar', () => {
    const avatar = screen.getByRole('img');
    expect(avatar).toHaveAttribute('src', 'https://i.imgur.com/7vQD0fPs.jpg');
  });
  test('Kriteria 4: Gambar avatar harus memiliki teks alternatif (alt) yang benar', () => {
    const avatar = screen.getByRole('img');
    expect(avatar).toHaveAttribute('alt', 'Gregorio Y. Zara');
  });
  test('Kriteria 5: Gambar avatar harus memiliki class "avatar"', () => {
    const avatar = screen.getByRole('img');
    expect(avatar).toHaveClass('avatar');
  });
  test('Kriteria 6: Harus menampilkan daftar todo dengan struktur yang benar', () => {
    const list = screen.getByRole('list');
    expect(list).toBeInTheDocument();
    const listItems = screen.getAllByRole('listitem');
    expect(listItems).toHaveLength(3);
  });
  test('Kriteria 7: Harus menampilkan semua item todo dengan teks yang benar', () => {
    const todoItems = ['Improve the videophone', 'Prepare aeronautics lectures', 'Work on the alcohol-fuelled engine'];
    todoItems.forEach(item => {
      expect(screen.getByText(item)).toBeInTheDocument();
    });
  });
  test('Kriteria 8: Item todo harus ditampilkan dalam urutan yang benar', () => {
    const listItems = screen.getAllByRole('listitem');
    expect(listItems[0]).toHaveTextContent('Improve the videophone');
    expect(listItems[1]).toHaveTextContent('Prepare aeronautics lectures');
    expect(listItems[2]).toHaveTextContent('Work on the alcohol-fuelled engine');
  });
  test('Kriteria 9: Container harus menerapkan styling theme dengan benar', () => {
    const container = screen.getByRole('heading').parentElement;
    expect(container).toBeInTheDocument();

    // Periksa bahwa style backgroundColor dan color telah diaplikasikan
    expect(container.style.backgroundColor).not.toBe('');
    expect(container.style.color).not.toBe('');
  });
  test('Kriteria 10: URL gambar harus dikonstruksi dengan benar dari baseUrl dan data person', () => {
    const avatar = screen.getByRole('img');
    const src = avatar.getAttribute('src');

    // Memastikan URL mengandung komponen yang benar
    expect(src).toContain('https://i.imgur.com/');
    expect(src).toContain('7vQD0fP');
    expect(src).toContain('s.jpg');
  });

  // Tes yang baru (memperbaiki error)
  test('Kriteria 11: Struktur layout komponen harus sesuai (div > heading + image + list)', () => {
    const {
      container
    } = render(/*#__PURE__*/(0, _jsxRuntime.jsx)(TodoList, {}));
    const mainDiv = container.firstChild;
    expect(mainDiv).toBeInTheDocument();
    expect(mainDiv.tagName.toLowerCase()).toBe('div');

    // Cari elemen-elemen secara spesifik di dalam mainDiv
    const heading = mainDiv.querySelector('h1');
    const image = mainDiv.querySelector('img.avatar');
    const list = mainDiv.querySelector('ul');

    // Pastikan ketiga elemen tersebut ada di dalam mainDiv
    expect(heading).toBeInTheDocument();
    expect(image).toBeInTheDocument();
    expect(list).toBeInTheDocument();
  });
  test('Kriteria 12: Komponen "TodoList" harus diexport dengan benar', () => {
    // Tes ini memastikan mahasiswa tidak lupa mengekspor komponen mereka
    expect(TodoList).toBeDefined();
    expect(typeof TodoList).toBe('function');
  });
  test('Kriteria 13: Komponen harus dapat di-render tanpa error', () => {
    expect(() => render(/*#__PURE__*/(0, _jsxRuntime.jsx)(TodoList, {}))).not.toThrow();
  });
  test('Kriteria 14: Data person object harus digunakan dengan benar', () => {
    // Test penggunaan nama dari person object
    const heading = screen.getByText(/Gregorio Y. Zara/i);
    expect(heading).toBeInTheDocument();

    // Test penggunaan nama untuk alt attribute
    const avatar = screen.getByRole('img');
    expect(avatar).toHaveAttribute('alt', 'Gregorio Y. Zara');
  });
  test('Kriteria 15: Theme object properties harus diaplikasikan dengan benar', () => {
    const container = screen.getByRole('heading').parentElement;
    expect(container).toBeInTheDocument();

    // Memastikan theme backgroundColor dan color tidak kosong
    expect(container.style.backgroundColor).not.toBe('');
    expect(container.style.color).not.toBe('');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJwcm9wcyIsIl9qc3hSdW50aW1lIiwianN4IiwicmVxdWlyZSIsImplc3QiLCJSZWFjdCIsInJlbmRlciIsInNjcmVlbiIsInByb2Nlc3MiLCJlbnYiLCJTVUJNSVNTSU9OX1BBVEgiLCJFcnJvciIsInN1Ym1pc3Npb24iLCJUb2RvTGlzdCIsImRlZmF1bHQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJ0ZXN0IiwiaGVhZGluZyIsImdldEJ5Um9sZSIsImxldmVsIiwibmFtZSIsImV4cGVjdCIsInRvQmVJblRoZURvY3VtZW50IiwiYXZhdGFyIiwidG9IYXZlQXR0cmlidXRlIiwidG9IYXZlQ2xhc3MiLCJsaXN0IiwibGlzdEl0ZW1zIiwiZ2V0QWxsQnlSb2xlIiwidG9IYXZlTGVuZ3RoIiwidG9kb0l0ZW1zIiwiZm9yRWFjaCIsIml0ZW0iLCJnZXRCeVRleHQiLCJ0b0hhdmVUZXh0Q29udGVudCIsImNvbnRhaW5lciIsInBhcmVudEVsZW1lbnQiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsIm5vdCIsInRvQmUiLCJjb2xvciIsInNyYyIsImdldEF0dHJpYnV0ZSIsInRvQ29udGFpbiIsIm1haW5EaXYiLCJmaXJzdENoaWxkIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwicXVlcnlTZWxlY3RvciIsImltYWdlIiwidG9CZURlZmluZWQiLCJ0b1Rocm93Il0sInNvdXJjZXMiOlsidG9kb2xpc3QudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBqZXN0LWVudmlyb25tZW50IGpzZG9tXG4gKi9cbnJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nKTtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgcmVuZGVyLCBzY3JlZW4gfSA9IHJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnKTtcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQkFHSUFOIDE6IFBFUlNJQVBBTiBMSU5HS1VOR0FOXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIE1vY2tpbmcgKG1lbWJ1YXQgdGlydWFuKSBkYXJpIGtvbXBvbmVuICduZXh0L2ltYWdlJy5cbi8vIEluaSBkaXBlcmx1a2FuIGthcmVuYSBraXRhIG1lbmphbGFua2FuIHRlcyBkaSBsdWFyIGxpbmdrdW5nYW4gTmV4dC5qcy5cbmplc3QubW9jaygnbmV4dC9pbWFnZScsICgpID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBuZXh0L25leHQvbm8taW1nLWVsZW1lbnRcbiAgcmV0dXJuIChwcm9wcykgPT4gPGltZyB7Li4ucHJvcHN9IC8+O1xufSk7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJBR0lBTiAyOiBNRU5HQU1CSUwgS09ERSBNQUhBU0lTV0EgKFNhdHUtc2F0dW55YSB5YW5nIGRpLWltcG9ydClcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gUEVOVElORzogS29kZSBpbmkgc2VjYXJhIGRpbmFtaXMgbWVuZ2ltcG9yIGZpbGUgbWFoYXNpc3dhIHlhbmcgZGktdXBsb2FkLlxuLy8gUGF0aC1ueWEgZGlraXJpbSBvbGVoIENvbnRyb2xsZXIgTGFyYXZlbCBtZWxhbHVpIGVudmlyb25tZW50IHZhcmlhYmxlLlxuaWYgKCFwcm9jZXNzLmVudi5TVUJNSVNTSU9OX1BBVEgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdTVUJNSVNTSU9OX1BBVEggZW52aXJvbm1lbnQgdmFyaWFibGUgbm90IHNldC4nKTtcbn1cbmNvbnN0IHN1Ym1pc3Npb24gPSByZXF1aXJlKHByb2Nlc3MuZW52LlNVQk1JU1NJT05fUEFUSCk7XG5jb25zdCBUb2RvTGlzdCA9IHN1Ym1pc3Npb24uVG9kb0xpc3QgfHwgc3VibWlzc2lvbi5kZWZhdWx0IHx8IHN1Ym1pc3Npb247XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJBR0lBTiAzOiBcIkNIRUNLTElTVFwiIFBFTklMQUlBTiBGVU5HU0lPTkFMXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIEluaSBhZGFsYWggaW50aSBkYXJpIFwia3VuY2kgamF3YWJhblwiIEFuZGEuXG4vLyBTZXRpYXAgJ3Rlc3QnIGFkYWxhaCBzYXR1IGtyaXRlcmlhIHBlbmlsYWlhbiB5YW5nIGFrYW4gbWVuZ2hhc2lsa2FuIExVTFVTIGF0YXUgR0FHQUwuXG5kZXNjcmliZSgnUHJha3Rpa3VtOiBLb21wb25lbiBUb2RvTGlzdCcsICgpID0+IHtcblxuICAvLyBGdW5nc2kgaW5pIGFrYW4gZGlqYWxhbmthbiBzZWJlbHVtIHNldGlhcCAndGVzdCcgZGkgYmF3YWggaW5pLlxuICAvLyBUdWp1YW5ueWEgYWdhciBraXRhIHRpZGFrIHBlcmx1IG1lbnVsaXMgYHJlbmRlcig8VG9kb0xpc3QgLz4pYCBiZXJ1bGFuZyBrYWxpLlxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICByZW5kZXIoPFRvZG9MaXN0IC8+KTtcbiAgfSk7XG5cbi8vIFRlcyB5YW5nIGJhcnUgKGxlYmloIGFuZGFsKVxuICAgIHRlc3QoJ0tyaXRlcmlhIDE6IEhhcnVzIG1lbmFtcGlsa2FuIGhlYWRpbmcgZGVuZ2FuIG5hbWEgcGVyc29uIHlhbmcgYmVuYXInLCAoKSA9PiB7XG4gICAgLy8gS2l0YSBjYXJpIGhlYWRpbmcgbGV2ZWwgMSB5YW5nIG1lbWlsaWtpIHRla3MgTEVOR0tBUCB5YW5nIGtpdGEgaW5naW5rYW4uXG4gICAgLy8gSW5pIGFrYW4gbWVtYXN0aWthbiBpYSBtZW5lbXVrYW4gc2F0dSBoZWFkaW5nIHV0dWguXG4gICAgY29uc3QgaGVhZGluZyA9IHNjcmVlbi5nZXRCeVJvbGUoJ2hlYWRpbmcnLCB7XG4gICAgICAgIGxldmVsOiAxLFxuICAgICAgICBuYW1lOiBcIkdyZWdvcmlvIFkuIFphcmEncyBUb2Rvc1wiXG4gICAgfSk7XG4gICAgZXhwZWN0KGhlYWRpbmcpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgdGVzdCgnS3JpdGVyaWEgMjogSGFydXMgbWVuYW1waWxrYW4gc2VidWFoIGVsZW1lbiBnYW1iYXIgKGF2YXRhciknLCAoKSA9PiB7XG4gICAgY29uc3QgYXZhdGFyID0gc2NyZWVuLmdldEJ5Um9sZSgnaW1nJyk7XG4gICAgZXhwZWN0KGF2YXRhcikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgdGVzdCgnS3JpdGVyaWEgMzogR2FtYmFyIGF2YXRhciBoYXJ1cyBtZW1pbGlraSBzdW1iZXIgKHNyYykgeWFuZyBiZW5hcicsICgpID0+IHtcbiAgICBjb25zdCBhdmF0YXIgPSBzY3JlZW4uZ2V0QnlSb2xlKCdpbWcnKTtcbiAgICBleHBlY3QoYXZhdGFyKS50b0hhdmVBdHRyaWJ1dGUoJ3NyYycsICdodHRwczovL2kuaW1ndXIuY29tLzd2UUQwZlBzLmpwZycpO1xuICB9KTtcblxuICB0ZXN0KCdLcml0ZXJpYSA0OiBHYW1iYXIgYXZhdGFyIGhhcnVzIG1lbWlsaWtpIHRla3MgYWx0ZXJuYXRpZiAoYWx0KSB5YW5nIGJlbmFyJywgKCkgPT4ge1xuICAgIGNvbnN0IGF2YXRhciA9IHNjcmVlbi5nZXRCeVJvbGUoJ2ltZycpO1xuICAgIGV4cGVjdChhdmF0YXIpLnRvSGF2ZUF0dHJpYnV0ZSgnYWx0JywgJ0dyZWdvcmlvIFkuIFphcmEnKTtcbiAgfSk7XG5cbiAgdGVzdCgnS3JpdGVyaWEgNTogR2FtYmFyIGF2YXRhciBoYXJ1cyBtZW1pbGlraSBjbGFzcyBcImF2YXRhclwiJywgKCkgPT4ge1xuICAgIGNvbnN0IGF2YXRhciA9IHNjcmVlbi5nZXRCeVJvbGUoJ2ltZycpO1xuICAgIGV4cGVjdChhdmF0YXIpLnRvSGF2ZUNsYXNzKCdhdmF0YXInKTtcbiAgfSk7XG5cbiAgdGVzdCgnS3JpdGVyaWEgNjogSGFydXMgbWVuYW1waWxrYW4gZGFmdGFyIHRvZG8gZGVuZ2FuIHN0cnVrdHVyIHlhbmcgYmVuYXInLCAoKSA9PiB7XG4gICAgY29uc3QgbGlzdCA9IHNjcmVlbi5nZXRCeVJvbGUoJ2xpc3QnKTtcbiAgICBleHBlY3QobGlzdCkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIGNvbnN0IGxpc3RJdGVtcyA9IHNjcmVlbi5nZXRBbGxCeVJvbGUoJ2xpc3RpdGVtJyk7XG4gICAgZXhwZWN0KGxpc3RJdGVtcykudG9IYXZlTGVuZ3RoKDMpO1xuICB9KTtcblxuICB0ZXN0KCdLcml0ZXJpYSA3OiBIYXJ1cyBtZW5hbXBpbGthbiBzZW11YSBpdGVtIHRvZG8gZGVuZ2FuIHRla3MgeWFuZyBiZW5hcicsICgpID0+IHtcbiAgICBjb25zdCB0b2RvSXRlbXMgPSBbXG4gICAgICAnSW1wcm92ZSB0aGUgdmlkZW9waG9uZScsXG4gICAgICAnUHJlcGFyZSBhZXJvbmF1dGljcyBsZWN0dXJlcycsXG4gICAgICAnV29yayBvbiB0aGUgYWxjb2hvbC1mdWVsbGVkIGVuZ2luZSdcbiAgICBdO1xuXG4gICAgdG9kb0l0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChpdGVtKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnS3JpdGVyaWEgODogSXRlbSB0b2RvIGhhcnVzIGRpdGFtcGlsa2FuIGRhbGFtIHVydXRhbiB5YW5nIGJlbmFyJywgKCkgPT4ge1xuICAgIGNvbnN0IGxpc3RJdGVtcyA9IHNjcmVlbi5nZXRBbGxCeVJvbGUoJ2xpc3RpdGVtJyk7XG5cbiAgICBleHBlY3QobGlzdEl0ZW1zWzBdKS50b0hhdmVUZXh0Q29udGVudCgnSW1wcm92ZSB0aGUgdmlkZW9waG9uZScpO1xuICAgIGV4cGVjdChsaXN0SXRlbXNbMV0pLnRvSGF2ZVRleHRDb250ZW50KCdQcmVwYXJlIGFlcm9uYXV0aWNzIGxlY3R1cmVzJyk7XG4gICAgZXhwZWN0KGxpc3RJdGVtc1syXSkudG9IYXZlVGV4dENvbnRlbnQoJ1dvcmsgb24gdGhlIGFsY29ob2wtZnVlbGxlZCBlbmdpbmUnKTtcbiAgfSk7XG5cbiAgdGVzdCgnS3JpdGVyaWEgOTogQ29udGFpbmVyIGhhcnVzIG1lbmVyYXBrYW4gc3R5bGluZyB0aGVtZSBkZW5nYW4gYmVuYXInLCAoKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gc2NyZWVuLmdldEJ5Um9sZSgnaGVhZGluZycpLnBhcmVudEVsZW1lbnQ7XG4gICAgZXhwZWN0KGNvbnRhaW5lcikudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIFBlcmlrc2EgYmFod2Egc3R5bGUgYmFja2dyb3VuZENvbG9yIGRhbiBjb2xvciB0ZWxhaCBkaWFwbGlrYXNpa2FuXG4gICAgZXhwZWN0KGNvbnRhaW5lci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLm5vdC50b0JlKCcnKTtcbiAgICBleHBlY3QoY29udGFpbmVyLnN0eWxlLmNvbG9yKS5ub3QudG9CZSgnJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ0tyaXRlcmlhIDEwOiBVUkwgZ2FtYmFyIGhhcnVzIGRpa29uc3RydWtzaSBkZW5nYW4gYmVuYXIgZGFyaSBiYXNlVXJsIGRhbiBkYXRhIHBlcnNvbicsICgpID0+IHtcbiAgICBjb25zdCBhdmF0YXIgPSBzY3JlZW4uZ2V0QnlSb2xlKCdpbWcnKTtcbiAgICBjb25zdCBzcmMgPSBhdmF0YXIuZ2V0QXR0cmlidXRlKCdzcmMnKTtcblxuICAgIC8vIE1lbWFzdGlrYW4gVVJMIG1lbmdhbmR1bmcga29tcG9uZW4geWFuZyBiZW5hclxuICAgIGV4cGVjdChzcmMpLnRvQ29udGFpbignaHR0cHM6Ly9pLmltZ3VyLmNvbS8nKTtcbiAgICBleHBlY3Qoc3JjKS50b0NvbnRhaW4oJzd2UUQwZlAnKTtcbiAgICBleHBlY3Qoc3JjKS50b0NvbnRhaW4oJ3MuanBnJyk7XG4gIH0pO1xuXG4gIC8vIFRlcyB5YW5nIGJhcnUgKG1lbXBlcmJhaWtpIGVycm9yKVxudGVzdCgnS3JpdGVyaWEgMTE6IFN0cnVrdHVyIGxheW91dCBrb21wb25lbiBoYXJ1cyBzZXN1YWkgKGRpdiA+IGhlYWRpbmcgKyBpbWFnZSArIGxpc3QpJywgKCkgPT4ge1xuICAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gcmVuZGVyKDxUb2RvTGlzdCAvPik7XG4gICAgIGNvbnN0IG1haW5EaXYgPSBjb250YWluZXIuZmlyc3RDaGlsZDtcblxuICAgICBleHBlY3QobWFpbkRpdikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgZXhwZWN0KG1haW5EaXYudGFnTmFtZS50b0xvd2VyQ2FzZSgpKS50b0JlKCdkaXYnKTtcblxuICAgICAvLyBDYXJpIGVsZW1lbi1lbGVtZW4gc2VjYXJhIHNwZXNpZmlrIGRpIGRhbGFtIG1haW5EaXZcbiAgICAgY29uc3QgaGVhZGluZyA9IG1haW5EaXYucXVlcnlTZWxlY3RvcignaDEnKTtcbiAgICAgY29uc3QgaW1hZ2UgPSBtYWluRGl2LnF1ZXJ5U2VsZWN0b3IoJ2ltZy5hdmF0YXInKTtcbiAgICAgY29uc3QgbGlzdCA9IG1haW5EaXYucXVlcnlTZWxlY3RvcigndWwnKTtcblxuICAgIC8vIFBhc3Rpa2FuIGtldGlnYSBlbGVtZW4gdGVyc2VidXQgYWRhIGRpIGRhbGFtIG1haW5EaXZcbiAgICAgZXhwZWN0KGhlYWRpbmcpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgIGV4cGVjdChpbWFnZSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgZXhwZWN0KGxpc3QpLnRvQmVJblRoZURvY3VtZW50KCk7XG59KTtcblxuICB0ZXN0KCdLcml0ZXJpYSAxMjogS29tcG9uZW4gXCJUb2RvTGlzdFwiIGhhcnVzIGRpZXhwb3J0IGRlbmdhbiBiZW5hcicsICgpID0+IHtcbiAgICAvLyBUZXMgaW5pIG1lbWFzdGlrYW4gbWFoYXNpc3dhIHRpZGFrIGx1cGEgbWVuZ2Vrc3BvciBrb21wb25lbiBtZXJla2FcbiAgICBleHBlY3QoVG9kb0xpc3QpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHR5cGVvZiBUb2RvTGlzdCkudG9CZSgnZnVuY3Rpb24nKTtcbiAgfSk7XG5cbiAgdGVzdCgnS3JpdGVyaWEgMTM6IEtvbXBvbmVuIGhhcnVzIGRhcGF0IGRpLXJlbmRlciB0YW5wYSBlcnJvcicsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gcmVuZGVyKDxUb2RvTGlzdCAvPikpLm5vdC50b1Rocm93KCk7XG4gIH0pO1xuXG4gIHRlc3QoJ0tyaXRlcmlhIDE0OiBEYXRhIHBlcnNvbiBvYmplY3QgaGFydXMgZGlndW5ha2FuIGRlbmdhbiBiZW5hcicsICgpID0+IHtcbiAgICAvLyBUZXN0IHBlbmdndW5hYW4gbmFtYSBkYXJpIHBlcnNvbiBvYmplY3RcbiAgICBjb25zdCBoZWFkaW5nID0gc2NyZWVuLmdldEJ5VGV4dCgvR3JlZ29yaW8gWS4gWmFyYS9pKTtcbiAgICBleHBlY3QoaGVhZGluZykudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgIC8vIFRlc3QgcGVuZ2d1bmFhbiBuYW1hIHVudHVrIGFsdCBhdHRyaWJ1dGVcbiAgICBjb25zdCBhdmF0YXIgPSBzY3JlZW4uZ2V0QnlSb2xlKCdpbWcnKTtcbiAgICBleHBlY3QoYXZhdGFyKS50b0hhdmVBdHRyaWJ1dGUoJ2FsdCcsICdHcmVnb3JpbyBZLiBaYXJhJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ0tyaXRlcmlhIDE1OiBUaGVtZSBvYmplY3QgcHJvcGVydGllcyBoYXJ1cyBkaWFwbGlrYXNpa2FuIGRlbmdhbiBiZW5hcicsICgpID0+IHtcbiAgICBjb25zdCBjb250YWluZXIgPSBzY3JlZW4uZ2V0QnlSb2xlKCdoZWFkaW5nJykucGFyZW50RWxlbWVudDtcblxuICAgIGV4cGVjdChjb250YWluZXIpLnRvQmVJblRoZURvY3VtZW50KCk7XG5cbiAgICAvLyBNZW1hc3Rpa2FuIHRoZW1lIGJhY2tncm91bmRDb2xvciBkYW4gY29sb3IgdGlkYWsga29zb25nXG4gICAgZXhwZWN0KGNvbnRhaW5lci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpLm5vdC50b0JlKCcnKTtcbiAgICBleHBlY3QoY29udGFpbmVyLnN0eWxlLmNvbG9yKS5ub3QudG9CZSgnJyk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBT0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQU07RUFDNUI7RUFDQSxPQUFRQyxLQUFLLGlCQUFLLElBQUFDLFdBQUEsQ0FBQUMsR0FBQTtJQUFBLEdBQVNGO0VBQUssQ0FBRyxDQUFDO0FBQ3RDLENBQUMsQ0FBQzs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUFBLElBQUFDLFdBQUEsR0FBQUUsT0FBQTtBQUFBLFNBQUFMLFlBQUE7RUFBQTtJQUFBTTtFQUFBLElBQUFELE9BQUE7RUFBQUwsV0FBQSxHQUFBQSxDQUFBLEtBQUFNLElBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUF2QkE7QUFDQTtBQUNBO0FBQ0FELE9BQU8sQ0FBQywyQkFBMkIsQ0FBQztBQUNwQyxNQUFNRSxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFRyxNQUFNO0VBQUVDO0FBQU8sQ0FBQyxHQUFHSixPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFtQjVELElBQUksQ0FBQ0ssT0FBTyxDQUFDQyxHQUFHLENBQUNDLGVBQWUsRUFBRTtFQUNoQyxNQUFNLElBQUlDLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQztBQUNsRTtBQUNBLE1BQU1DLFVBQVUsR0FBR1QsT0FBTyxDQUFDSyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsZUFB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