{"version":3,"names":["_getJestObj","mock","props","_jsxRuntime","jsx","require","jest","React","render","screen","process","env","SUBMISSION_PATH","Error","submission","TodoList","default","describe","beforeEach","test","heading","getByRole","level","expect","toBeInTheDocument","toHaveTextContent","avatar","toHaveAttribute","toHaveClass","list","listItems","getAllByRole","toHaveLength","todoItems","forEach","item","getByText","container","parentElement","style","backgroundColor","not","toBe","color","src","getAttribute","toContain","mainDiv","firstChild","tagName","toLowerCase","image","toContainElement","toBeDefined","toThrow"],"sources":["todolist.test.js"],"sourcesContent":["/**\n * @jest-environment jsdom\n */\nrequire('@testing-library/jest-dom');\nconst React = require('react');\nconst { render, screen } = require('@testing-library/react');\n\n// ======================================================================\n// BAGIAN 1: PERSIAPAN LINGKUNGAN\n// ======================================================================\n\n// Mocking (membuat tiruan) dari komponen 'next/image'.\n// Ini diperlukan karena kita menjalankan tes di luar lingkungan Next.js.\njest.mock('next/image', () => {\n  // eslint-disable-next-line @next/next/no-img-element\n  return (props) => <img {...props} />;\n});\n\n// ======================================================================\n// BAGIAN 2: MENGAMBIL KODE MAHASISWA (Satu-satunya yang di-import)\n// ======================================================================\n\n// PENTING: Kode ini secara dinamis mengimpor file mahasiswa yang di-upload.\n// Path-nya dikirim oleh Controller Laravel melalui environment variable.\nif (!process.env.SUBMISSION_PATH) {\n  throw new Error('SUBMISSION_PATH environment variable not set.');\n}\nconst submission = require(process.env.SUBMISSION_PATH);\nconst TodoList = submission.TodoList || submission.default || submission;\n\n// ======================================================================\n// BAGIAN 3: \"CHECKLIST\" PENILAIAN FUNGSIONAL\n// ======================================================================\n\n// Ini adalah inti dari \"kunci jawaban\" Anda.\n// Setiap 'test' adalah satu kriteria penilaian yang akan menghasilkan LULUS atau GAGAL.\ndescribe('Praktikum: Komponen TodoList', () => {\n\n  // Fungsi ini akan dijalankan sebelum setiap 'test' di bawah ini.\n  // Tujuannya agar kita tidak perlu menulis `render(<TodoList />)` berulang kali.\n  beforeEach(() => {\n    render(<TodoList />);\n  });\n\n  test('Kriteria 1: Harus menampilkan heading dengan nama person yang benar', () => {\n    const heading = screen.getByRole('heading', { level: 1 });\n    expect(heading).toBeInTheDocument();\n    expect(heading).toHaveTextContent(\"Gregorio Y. Zara's Todos\");\n  });\n\n  test('Kriteria 2: Harus menampilkan sebuah elemen gambar (avatar)', () => {\n    const avatar = screen.getByRole('img');\n    expect(avatar).toBeInTheDocument();\n  });\n\n  test('Kriteria 3: Gambar avatar harus memiliki sumber (src) yang benar', () => {\n    const avatar = screen.getByRole('img');\n    expect(avatar).toHaveAttribute('src', 'https://i.imgur.com/7vQD0fPs.jpg');\n  });\n\n  test('Kriteria 4: Gambar avatar harus memiliki teks alternatif (alt) yang benar', () => {\n    const avatar = screen.getByRole('img');\n    expect(avatar).toHaveAttribute('alt', 'Gregorio Y. Zara');\n  });\n\n  test('Kriteria 5: Gambar avatar harus memiliki class \"avatar\"', () => {\n    const avatar = screen.getByRole('img');\n    expect(avatar).toHaveClass('avatar');\n  });\n\n  test('Kriteria 6: Harus menampilkan daftar todo dengan struktur yang benar', () => {\n    const list = screen.getByRole('list');\n    expect(list).toBeInTheDocument();\n\n    const listItems = screen.getAllByRole('listitem');\n    expect(listItems).toHaveLength(3);\n  });\n\n  test('Kriteria 7: Harus menampilkan semua item todo dengan teks yang benar', () => {\n    const todoItems = [\n      'Improve the videophone',\n      'Prepare aeronautics lectures',\n      'Work on the alcohol-fuelled engine'\n    ];\n\n    todoItems.forEach(item => {\n      expect(screen.getByText(item)).toBeInTheDocument();\n    });\n  });\n\n  test('Kriteria 8: Item todo harus ditampilkan dalam urutan yang benar', () => {\n    const listItems = screen.getAllByRole('listitem');\n\n    expect(listItems[0]).toHaveTextContent('Improve the videophone');\n    expect(listItems[1]).toHaveTextContent('Prepare aeronautics lectures');\n    expect(listItems[2]).toHaveTextContent('Work on the alcohol-fuelled engine');\n  });\n\n  test('Kriteria 9: Container harus menerapkan styling theme dengan benar', () => {\n    const container = screen.getByRole('heading').parentElement;\n    expect(container).toBeInTheDocument();\n\n    // Periksa bahwa style backgroundColor dan color telah diaplikasikan\n    expect(container.style.backgroundColor).not.toBe('');\n    expect(container.style.color).not.toBe('');\n  });\n\n  test('Kriteria 10: URL gambar harus dikonstruksi dengan benar dari baseUrl dan data person', () => {\n    const avatar = screen.getByRole('img');\n    const src = avatar.getAttribute('src');\n\n    // Memastikan URL mengandung komponen yang benar\n    expect(src).toContain('https://i.imgur.com/');\n    expect(src).toContain('7vQD0fP');\n    expect(src).toContain('s.jpg');\n  });\n\n  test('Kriteria 11: Struktur layout komponen harus sesuai (div > heading + image + list)', () => {\n    const { container } = render(<TodoList />);\n    const mainDiv = container.firstChild;\n\n    expect(mainDiv).toBeInTheDocument();\n    expect(mainDiv.tagName.toLowerCase()).toBe('div');\n\n    // Memastikan main div berisi semua elemen yang diperlukan\n    const heading = screen.getByRole('heading');\n    const image = screen.getByRole('img');\n    const list = screen.getByRole('list');\n\n    expect(mainDiv).toContainElement(heading);\n    expect(mainDiv).toContainElement(image);\n    expect(mainDiv).toContainElement(list);\n  });\n\n  test('Kriteria 12: Komponen \"TodoList\" harus diexport dengan benar', () => {\n    // Tes ini memastikan mahasiswa tidak lupa mengekspor komponen mereka\n    expect(TodoList).toBeDefined();\n    expect(typeof TodoList).toBe('function');\n  });\n\n  test('Kriteria 13: Komponen harus dapat di-render tanpa error', () => {\n    expect(() => render(<TodoList />)).not.toThrow();\n  });\n\n  test('Kriteria 14: Data person object harus digunakan dengan benar', () => {\n    // Test penggunaan nama dari person object\n    const heading = screen.getByText(/Gregorio Y. Zara/i);\n    expect(heading).toBeInTheDocument();\n\n    // Test penggunaan nama untuk alt attribute\n    const avatar = screen.getByRole('img');\n    expect(avatar).toHaveAttribute('alt', 'Gregorio Y. Zara');\n  });\n\n  test('Kriteria 15: Theme object properties harus diaplikasikan dengan benar', () => {\n    const container = screen.getByRole('heading').parentElement;\n\n    expect(container).toBeInTheDocument();\n\n    // Memastikan theme backgroundColor dan color tidak kosong\n    expect(container.style.backgroundColor).not.toBe('');\n    expect(container.style.color).not.toBe('');\n  });\n});\n"],"mappings":"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","ignoreList":[]}