0162a3d798fd0d940ac84938dc540a32
"use strict";

// ======================================================================
// BAGIAN 1: PERSIAPAN LINGKUNGAN (MOCKING KOMPONEN CARD)
// ======================================================================

// Kode jawaban mahasiswa membutuhkan komponen 'Card'.
// Kita buat tiruannya agar tes kita tidak bergantung pada file Card.js yang sebenarnya.
// Tiruan ini akan me-render children di dalam sebuah div dengan class 'card'.
_getJestObj().mock('./Card.js', () => {
  return function MockedCard({
    children
  }) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "card",
      children: children
    });
  };
}, {
  virtual: true
});

// ======================================================================
// BAGIAN 2: MENGAMBIL KODE MAHASISWA
// ======================================================================
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen
} = require('@testing-library/react');
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
// Mengambil komponen MyProfileV2 dari file jawaban mahasiswa.
const submission = require(process.env.SUBMISSION_PATH);
const MyProfileV2 = submission.MyProfileV2 || submission.default || submission;

// ======================================================================
// BAGIAN 3: "CHECKLIST" PENILAIAN FUNGSIONAL UNTUK MYPROFILEV2
// ======================================================================
describe('Praktikum: Komponen MyProfileV2', () => {
  beforeEach(() => {
    // Render komponen mahasiswa sebelum setiap tes
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(MyProfileV2, {}));
  });
  test('Kriteria 1: Harus me-render DUA komponen Card', () => {
    // Kita cari berdasarkan class 'card' yang ada di komponen tiruan kita.
    const cardElements = screen.getAllByRole('generic', {
      name: ''
    }).filter(el => el.classList.contains('card'));
    // Atau cara yang lebih sederhana jika tidak ada elemen lain:
    // const cardElements = document.querySelectorAll('.card');
    expect(cardElements).toHaveLength(2);
  });
  test('Kriteria 2: Card pertama harus berisi judul "Foto" dan sebuah gambar', () => {
    // Cari heading 'Foto'
    const photoHeading = screen.getByRole('heading', {
      name: /Foto/i,
      level: 1
    });
    expect(photoHeading).toBeInTheDocument();

    // Cari gambar di dalam Card yang sama
    const avatarImage = screen.getByAltText('Aklilu Lemma');
    expect(avatarImage).toBeInTheDocument();

    // Pastikan heading dan gambar berada di dalam satu Card yang sama
    expect(photoHeading.parentElement).toBe(avatarImage.parentElement);
  });
  test('Kriteria 3: Gambar di Card "Foto" harus memiliki atribut yang benar', () => {
    const avatarImage = screen.getByAltText('Aklilu Lemma');
    expect(avatarImage).toHaveClass('avatar');
    expect(avatarImage).toHaveAttribute('src', 'https://i.imgur.com/OKS67lhm.jpg');
    expect(avatarImage).toHaveAttribute('width', '70');
  });
  test('Kriteria 4: Card kedua harus berisi judul "Tentang" dan sebuah paragraf deskripsi', () => {
    // Cari heading 'Tentang'
    const aboutHeading = screen.getByRole('heading', {
      name: /Tentang/i,
      level: 1
    });
    expect(aboutHeading).toBeInTheDocument();

    // Cari paragraf deskripsi
    const description = screen.getByText(/Aklilu Lemma adalah seorang ilmuwan/i);
    expect(description).toBeInTheDocument();
    expect(description.tagName.toLowerCase()).toBe('p');

    // Pastikan heading dan paragraf berada di dalam satu Card yang sama
    expect(aboutHeading.parentElement).toBe(description.parentElement);
  });
  test('Kriteria 5: Komponen "MyProfileV2" harus diexport dengan benar', () => {
    expect(MyProfileV2).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,