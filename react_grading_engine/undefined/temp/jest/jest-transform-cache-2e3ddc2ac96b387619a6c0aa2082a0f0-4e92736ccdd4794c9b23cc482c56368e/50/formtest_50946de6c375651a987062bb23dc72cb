115fa2f5ad83804a809ea92d1f380afe
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen,
  fireEvent,
  waitFor
} = require('@testing-library/react');
const userEvent = require('@testing-library/user-event').default;

// ======================================================================
// TIDAK ADA MOCKING DEPENDENSI KARENA KODE INI MANDIRI
// ======================================================================

// ======================================================================
// BAGIAN 2: MENGAMBIL KODE MAHASISWA
// ======================================================================
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
// Mengambil komponen Form dari file jawaban mahasiswa.
const Form = require(process.env.SUBMISSION_PATH).default;

// ======================================================================
// BAGIAN 3: "CHECKLIST" PENILAIAN FUNGSIONAL
// ======================================================================
describe('Praktikum: Komponen Form Interaktif', () => {
  // Siapkan user-event untuk simulasi interaksi pengguna yang lebih realistis
  const user = userEvent.setup();
  test('Kriteria 1: Harus menampilkan semua elemen form saat awal render', () => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Form, {}));
    expect(screen.getByRole('heading', {
      name: /Tebak Nama Hewan/i
    })).toBeInTheDocument();
    expect(screen.getByText(/Hewan apa yang ditakuti oleh doraemon?/i)).toBeInTheDocument();
    // 'textbox' adalah peran untuk <textarea>
    expect(screen.getByRole('textbox')).toBeInTheDocument();
    expect(screen.getByRole('button', {
      name: /Submit/i
    })).toBeInTheDocument();
  });
  test('Kriteria 2: Tombol "Submit" harus nonaktif (disabled) jika textarea kosong', () => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Form, {}));
    const submitButton = screen.getByRole('button', {
      name: /Submit/i
    });
    expect(submitButton).toBeDisabled();
  });
  test('Kriteria 3: Tombol "Submit" harus aktif jika textarea sudah diisi', async () => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Form, {}));
    const textarea = screen.getByRole('textbox');
    const submitButton = screen.getByRole('button', {
      name: /Submit/i
    });

    // Simulasi pengguna mengetik
    await user.type(textarea, 'jawaban');

    // Tombol sekarang harus bisa diklik
    expect(submitButton).not.toBeDisabled();
  });
  test('Kriteria 4: Menampilkan pesan error jika jawaban yang di-submit salah', async () => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Form, {}));
    const textarea = screen.getByRole('textbox');
    const submitButton = screen.getByRole('button', {
      name: /Submit/i
    });

    // Simulasi pengguna mengetik jawaban yang salah dan menekan submit
    await user.type(textarea, 'kucing');
    await user.click(submitButton);

    // `waitFor` digunakan untuk menunggu elemen muncul setelah proses async (setTimeout)
    const errorMessage = await screen.findByText(/Tebakan yang bagus tetapi jawaban salah/i);
    expect(errorMessage).toBeInTheDocument();
  });
  test('Kriteria 5: Menampilkan pesan sukses jika jawaban yang di-submit benar', async () => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Form, {}));
    const textarea = screen.getByRole('textbox');
    const submitButton = screen.getByRole('button', {
      name: /Submit/i
    });

    // Simulasi pengguna mengetik jawaban yang benar (case-insensitive) dan menekan submit
    await user.type(textarea, 'tikus');
    await user.click(submitButton);

    // Tunggu hingga pesan sukses muncul
    const successMessage = await screen.findByRole('heading', {
      name: /Yay... Jawaban Benar!/i
    });
    expect(successMessage).toBeInTheDocument();

    // Pastikan form sudah hilang setelah jawaban benar
    expect(screen.queryByRole('textbox')).not.toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,