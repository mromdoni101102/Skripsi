3cc62a6f0e80fe9c792c592316226c94
"use strict";

// ======================================================================
// BAGIAN 1: PERSIAPAN LINGKUNGAN
// ======================================================================

// Karena komponen MyGallery kemungkinan memanggil fungsi getImageUrl dari file utils.js,
// kita perlu membuat fungsi tiruan (mock) untuk itu.
// Ini memberitahu Jest: "Jika ada yang butuh getImageUrl, jangan cari filenya,
// pakai saja fungsi palsu buatan saya ini".
_getJestObj().mock('../utils/utils.js', () => ({
  getImageUrl: person => `https://i.imgur.com/${person.imageId}s.jpg`
}), {
  virtual: true
}); // virtual: true membantu jika path-nya rumit

// ======================================================================
// BAGIAN 2: MENGAMBIL KODE MAHASISWA
// ======================================================================

// Mengambil file jawaban mahasiswa yang dikirim oleh Controller Laravel.
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen
} = require('@testing-library/react');
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
// Logika cerdas untuk mengambil komponen MyGallery, apapun cara mahasiswa mengekspornya.
const submission = require(process.env.SUBMISSION_PATH);
const MyGallery = submission.MyGallery || submission.default || submission;

// ======================================================================
// BAGIAN 3: "CHECKLIST" PENILAIAN FUNGSIONAL UNTUK MYGALLERY
// ======================================================================

describe('Praktikum: Komponen MyGallery dan Profile', () => {
  // Render komponen mahasiswa sebelum setiap tes dijalankan
  beforeEach(() => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(MyGallery, {}));
  });
  test('Kriteria 1: Harus menampilkan judul utama "Notable Scientists"', () => {
    // Cari heading level 1 (h1)
    const mainHeading = screen.getByRole('heading', {
      level: 1,
      name: /Notable Scientists/i
    });
    expect(mainHeading).toBeInTheDocument();
  });
  test('Kriteria 2: Harus menampilkan DUA Profile ilmuwan', () => {
    // Kita cari berdasarkan nama mereka yang seharusnya ada di heading level 2 (h2)
    const mariaHeading = screen.getByRole('heading', {
      name: /Maria Skłodowska-Curie/i
    });
    const katsukoHeading = screen.getByRole('heading', {
      name: /Katsuko Saruhashi/i
    });
    expect(mariaHeading).toBeInTheDocument();
    expect(katsukoHeading).toBeInTheDocument();
  });
  test('Kriteria 3: Harus menampilkan gambar avatar untuk kedua ilmuwan', () => {
    // Cari gambar berdasarkan teks alternatif (alt text) nya
    const mariaAvatar = screen.getByAltText('Maria Skłodowska-Curie');
    const katsukoAvatar = screen.getByAltText('Katsuko Saruhashi');
    expect(mariaAvatar).toBeInTheDocument();
    expect(katsukoAvatar).toBeInTheDocument();

    // Cek juga apakah class 'avatar' sudah terpasang
    expect(mariaAvatar).toHaveClass('avatar');
    expect(katsukoAvatar).toHaveClass('avatar');
  });
  test('Kriteria 4: Harus menampilkan daftar penghargaan untuk Maria Curie', () => {
    // Cari teks spesifik yang seharusnya ada di dalam list
    const mariaAwards = screen.getByText(/Penghargaan Nobel Fisika, Penghargaan Nobel Kimia/i);
    expect(mariaAwards).toBeInTheDocument();
  });
  test('Kriteria 5: Harus menampilkan penemuan dari Katsuko Saruhashi', () => {
    // Cari teks spesifik dari penemuannya
    const katsukoDiscovery = screen.getByText(/sebuah metode untuk mengukur karbon dioksida/i);
    expect(katsukoDiscovery).toBeInTheDocument();
  });
  test('Kriteria 6: Komponen "MyGallery" harus diexport dengan benar', () => {
    expect(MyGallery).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,