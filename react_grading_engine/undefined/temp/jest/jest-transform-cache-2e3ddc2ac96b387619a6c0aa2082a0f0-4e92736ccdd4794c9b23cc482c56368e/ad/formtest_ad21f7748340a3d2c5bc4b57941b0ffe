ec292b493d8dc7272a6ef813a1295631
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen,
  fireEvent,
  waitFor
} = require('@testing-library/react');
const userEvent = require('@testing-library/user-event').default;

// Mengambil komponen Form dari file jawaban mahasiswa.
const Form = require(process.env.SUBMISSION_PATH).default;
describe('Praktikum: Komponen Form Interaktif', () => {
  const user = userEvent.setup();
  test('Kriteria 1: Harus menampilkan semua elemen form saat awal render', () => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Form, {}));
    expect(screen.getByRole('heading', {
      name: /Tebak Nama Hewan/i
    })).toBeInTheDocument();
    expect(screen.getByRole('textbox')).toBeInTheDocument();
    expect(screen.getByRole('button', {
      name: /Submit/i
    })).toBeInTheDocument();
  });
  test('Kriteria 2: Tombol "Submit" harus nonaktif jika textarea kosong', () => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Form, {}));
    expect(screen.getByRole('button', {
      name: /Submit/i
    })).toBeDisabled();
  });
  test('Kriteria 3: Menampilkan pesan error jika jawaban salah', async () => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Form, {}));
    await user.type(screen.getByRole('textbox'), 'kucing');
    await user.click(screen.getByRole('button', {
      name: /Submit/i
    }));
    expect(await screen.findByText(/Tebakan yang bagus tetapi jawaban salah/i)).toBeInTheDocument();
  });
  test('Kriteria 4: Menampilkan pesan sukses jika jawaban benar', async () => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Form, {}));
    await user.type(screen.getByRole('textbox'), 'tikus');
    await user.click(screen.getByRole('button', {
      name: /Submit/i
    }));
    expect(await screen.findByRole('heading', {
      name: /Yay... Jawaban Benar!/i
    })).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiUmVhY3QiLCJyZW5kZXIiLCJzY3JlZW4iLCJmaXJlRXZlbnQiLCJ3YWl0Rm9yIiwidXNlckV2ZW50IiwiZGVmYXVsdCIsIkZvcm0iLCJwcm9jZXNzIiwiZW52IiwiU1VCTUlTU0lPTl9QQVRIIiwiZGVzY3JpYmUiLCJ1c2VyIiwic2V0dXAiLCJ0ZXN0IiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJleHBlY3QiLCJnZXRCeVJvbGUiLCJuYW1lIiwidG9CZUluVGhlRG9jdW1lbnQiLCJ0b0JlRGlzYWJsZWQiLCJ0eXBlIiwiY2xpY2siLCJmaW5kQnlUZXh0IiwiZmluZEJ5Um9sZSJdLCJzb3VyY2VzIjpbImZvcm0udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBqZXN0LWVudmlyb25tZW50IGpzZG9tXG4gKi9cbnJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nKTtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCwgd2FpdEZvciB9ID0gcmVxdWlyZSgnQHRlc3RpbmctbGlicmFyeS9yZWFjdCcpO1xuY29uc3QgdXNlckV2ZW50ID0gcmVxdWlyZSgnQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50JykuZGVmYXVsdDtcblxuLy8gTWVuZ2FtYmlsIGtvbXBvbmVuIEZvcm0gZGFyaSBmaWxlIGphd2FiYW4gbWFoYXNpc3dhLlxuY29uc3QgRm9ybSA9IHJlcXVpcmUocHJvY2Vzcy5lbnYuU1VCTUlTU0lPTl9QQVRIKS5kZWZhdWx0O1xuXG5kZXNjcmliZSgnUHJha3Rpa3VtOiBLb21wb25lbiBGb3JtIEludGVyYWt0aWYnLCAoKSA9PiB7XG5cbiAgY29uc3QgdXNlciA9IHVzZXJFdmVudC5zZXR1cCgpO1xuXG4gIHRlc3QoJ0tyaXRlcmlhIDE6IEhhcnVzIG1lbmFtcGlsa2FuIHNlbXVhIGVsZW1lbiBmb3JtIHNhYXQgYXdhbCByZW5kZXInLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxGb3JtIC8+KTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnaGVhZGluZycsIHsgbmFtZTogL1RlYmFrIE5hbWEgSGV3YW4vaSB9KSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgndGV4dGJveCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9TdWJtaXQvaSB9KSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgdGVzdCgnS3JpdGVyaWEgMjogVG9tYm9sIFwiU3VibWl0XCIgaGFydXMgbm9uYWt0aWYgamlrYSB0ZXh0YXJlYSBrb3NvbmcnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxGb3JtIC8+KTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvU3VibWl0L2kgfSkpLnRvQmVEaXNhYmxlZCgpO1xuICB9KTtcblxuICB0ZXN0KCdLcml0ZXJpYSAzOiBNZW5hbXBpbGthbiBwZXNhbiBlcnJvciBqaWthIGphd2FiYW4gc2FsYWgnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKDxGb3JtIC8+KTtcbiAgICBhd2FpdCB1c2VyLnR5cGUoc2NyZWVuLmdldEJ5Um9sZSgndGV4dGJveCcpLCAna3VjaW5nJyk7XG4gICAgYXdhaXQgdXNlci5jbGljayhzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9TdWJtaXQvaSB9KSk7XG4gICAgZXhwZWN0KGF3YWl0IHNjcmVlbi5maW5kQnlUZXh0KC9UZWJha2FuIHlhbmcgYmFndXMgdGV0YXBpIGphd2FiYW4gc2FsYWgvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIHRlc3QoJ0tyaXRlcmlhIDQ6IE1lbmFtcGlsa2FuIHBlc2FuIHN1a3NlcyBqaWthIGphd2FiYW4gYmVuYXInLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKDxGb3JtIC8+KTtcbiAgICBhd2FpdCB1c2VyLnR5cGUoc2NyZWVuLmdldEJ5Um9sZSgndGV4dGJveCcpLCAndGlrdXMnKTtcbiAgICBhd2FpdCB1c2VyLmNsaWNrKHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL1N1Ym1pdC9pIH0pKTtcbiAgICBleHBlY3QoYXdhaXQgc2NyZWVuLmZpbmRCeVJvbGUoJ2hlYWRpbmcnLCB7IG5hbWU6IC9ZYXkuLi4gSmF3YWJhbiBCZW5hciEvaSB9KSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNBO0FBQ0FBLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQztBQUNwQyxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFRSxNQUFNO0VBQUVDLE1BQU07RUFBRUMsU0FBUztFQUFFQztBQUFRLENBQUMsR0FBR0wsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0FBQ2hGLE1BQU1NLFNBQVMsR0FBR04sT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUNPLE9BQU87O0FBRWhFO0FBQ0EsTUFBTUMsSUFBSSxHQUFHUixPQUFPLENBQUNTLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxlQUFlLENBQUMsQ0FBQ0osT0FBTztBQUV6REssUUFBUSxDQUFDLHFDQUFxQyxFQUFFLE1BQU07RUFFcEQsTUFBTUMsSUFBSSxHQUFHUCxTQUFTLENBQUNRLEtBQUssQ0FBQyxDQUFDO0VBRTlCQyxJQUFJLENBQUMsa0VBQWtFLEVBQUUsTUFBTTtJQUM3RWIsTUFBTSxjQUFDLElBQUFjLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVCxJQUFJLElBQUUsQ0FBQyxDQUFDO0lBQ2hCVSxNQUFNLENBQUNmLE1BQU0sQ0FBQ2dCLFNBQVMsQ0FBQyxTQUFTLEVBQUU7TUFBRUMsSUFBSSxFQUFFO0lBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7SUFDdEZILE1BQU0sQ0FBQ2YsTUFBTSxDQUFDZ0IsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUNFLGlCQUFpQixDQUFDLENBQUM7SUFDdkRILE1BQU0sQ0FBQ2YsTUFBTSxDQUFDZ0IsU0FBUyxDQUFDLFFBQVEsRUFBRTtNQUFFQyxJQUFJLEVBQUU7SUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQyxDQUFDO0VBQzdFLENBQUMsQ0FBQztFQUVGTixJQUFJLENBQUMsaUVBQWlFLEVBQUUsTUFBTTtJQUM1RWIsTUFBTSxjQUFDLElBQUFjLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVCxJQUFJLElBQUUsQ0FBQyxDQUFDO0lBQ2hCVSxNQUFNLENBQUNmLE1BQU0sQ0FBQ2dCLFNBQVMsQ0FBQyxRQUFRLEVBQUU7TUFBRUMsSUFBSSxFQUFFO0lBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQ0UsWUFBWSxDQUFDLENBQUM7RUFDeEUsQ0FBQyxDQUFDO0VBRUZQLElBQUksQ0FBQyx3REFBd0QsRUFBRSxZQUFZO0lBQ3pFYixNQUFNLGNBQUMsSUFBQWMsV0FBQSxDQUFBQyxHQUFBLEVBQUNULElBQUksSUFBRSxDQUFDLENBQUM7SUFDaEIsTUFBTUssSUFBSSxDQUFDVSxJQUFJLENBQUNwQixNQUFNLENBQUNnQixTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxDQUFDO0lBQ3RELE1BQU1OLElBQUksQ0FBQ1csS0FBSyxDQUFDckIsTUFBTSxDQUFDZ0IsU0FBUyxDQUFDLFFBQVEsRUFBRTtNQUFFQyxJQUFJLEVBQUU7SUFBVSxDQUFDLENBQUMsQ0FBQztJQUNqRUYsTUFBTSxDQUFDLE1BQU1mLE1BQU0sQ0FBQ3NCLFVBQVUsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUNKLGlCQUFpQixDQUFDLENBQUM7RUFDakcsQ0FBQyxDQUFDO0VBRUZOLElBQUksQ0FBQyx5REFBeUQsRUFBRSxZQUFZO0lBQzFFYixNQUFNLGNBQUMsSUFBQWMsV0FBQSxDQUFBQyxHQUFBLEVBQUNULElBQUksSUFBRSxDQUFDLENBQUM7SUFDaEIsTUFBTUssSUFBSSxDQUFDVSxJQUFJLENBQUNwQixNQUFNLENBQUNnQixTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxDQUFDO0lBQ3JELE1BQU1OLElBQUksQ0FBQ1csS0FBSyxDQUFDckIsTUFBTSxDQUFDZ0IsU0FBUyxDQUFDLFFBQVEsRUFBRTtNQUFFQyxJQUFJLEVBQUU7SUFBVSxDQUFDLENBQUMsQ0FBQztJQUNqRUYsTUFBTSxDQUFDLE1BQU1mLE1BQU0sQ0FBQ3VCLFVBQVUsQ0FBQyxTQUFTLEVBQUU7TUFBRU4sSUFBSSxFQUFFO0lBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7RUFDcEcsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119