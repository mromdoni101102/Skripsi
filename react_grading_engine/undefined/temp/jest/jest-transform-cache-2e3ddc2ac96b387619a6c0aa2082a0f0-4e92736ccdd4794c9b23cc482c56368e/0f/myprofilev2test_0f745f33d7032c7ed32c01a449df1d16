6a813b3301b59c1e80a52101f70a0899
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen
} = require('@testing-library/react');

// ======================================================================
// TIDAK ADA MOCKING SAMA SEKALI. KITA TES LANGSUNG.
// ======================================================================

// Mengambil kode mahasiswa
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
const MyProfileV2 = require(process.env.SUBMISSION_PATH).default;

// ======================================================================
// CHECKLIST PENILAIAN YANG SIMPEL DAN ANDAL
// ======================================================================
describe('Praktikum: Komponen MyProfileV2', () => {
  beforeEach(() => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(MyProfileV2, {}));
  });
  test('Kriteria 1: Harus menampilkan dua judul, yaitu "Foto" dan "Tentang"', () => {
    const photoHeading = screen.getByRole('heading', {
      name: /Foto/i
    });
    const aboutHeading = screen.getByRole('heading', {
      name: /Tentang/i
    });
    expect(photoHeading).toBeInTheDocument();
    expect(aboutHeading).toBeInTheDocument();
  });
  test('Kriteria 2: Harus menampilkan gambar avatar Aklilu Lemma', () => {
    const avatarImage = screen.getByAltText('Aklilu Lemma');
    expect(avatarImage).toBeInTheDocument();
    expect(avatarImage).toHaveClass('avatar');
  });
  test('Kriteria 3: Harus menampilkan paragraf deskripsi tentang Aklilu Lemma', () => {
    const description = screen.getByText(/seorang ilmuwan terkemuka dari Etiopia/i);
    expect(description).toBeInTheDocument();
  });
  test('Kriteria 4: Komponen "MyProfileV2" harus diexport dengan benar', () => {
    expect(MyProfileV2).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiUmVhY3QiLCJyZW5kZXIiLCJzY3JlZW4iLCJwcm9jZXNzIiwiZW52IiwiU1VCTUlTU0lPTl9QQVRIIiwiRXJyb3IiLCJNeVByb2ZpbGVWMiIsImRlZmF1bHQiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJfanN4UnVudGltZSIsImpzeCIsInRlc3QiLCJwaG90b0hlYWRpbmciLCJnZXRCeVJvbGUiLCJuYW1lIiwiYWJvdXRIZWFkaW5nIiwiZXhwZWN0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJhdmF0YXJJbWFnZSIsImdldEJ5QWx0VGV4dCIsInRvSGF2ZUNsYXNzIiwiZGVzY3JpcHRpb24iLCJnZXRCeVRleHQiLCJ0b0JlRGVmaW5lZCJdLCJzb3VyY2VzIjpbIm15cHJvZmlsZXYyLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBqc2RvbVxuICovXG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHJlbmRlciwgc2NyZWVuIH0gPSByZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L3JlYWN0Jyk7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFRJREFLIEFEQSBNT0NLSU5HIFNBTUEgU0VLQUxJLiBLSVRBIFRFUyBMQU5HU1VORy5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gTWVuZ2FtYmlsIGtvZGUgbWFoYXNpc3dhXG5pZiAoIXByb2Nlc3MuZW52LlNVQk1JU1NJT05fUEFUSCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1NVQk1JU1NJT05fUEFUSCBlbnZpcm9ubWVudCB2YXJpYWJsZSBub3Qgc2V0LicpO1xufVxuY29uc3QgTXlQcm9maWxlVjIgPSByZXF1aXJlKHByb2Nlc3MuZW52LlNVQk1JU1NJT05fUEFUSCkuZGVmYXVsdDtcblxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBDSEVDS0xJU1QgUEVOSUxBSUFOIFlBTkcgU0lNUEVMIERBTiBBTkRBTFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZGVzY3JpYmUoJ1ByYWt0aWt1bTogS29tcG9uZW4gTXlQcm9maWxlVjInLCAoKSA9PiB7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgcmVuZGVyKDxNeVByb2ZpbGVWMiAvPik7XG4gIH0pO1xuXG4gIHRlc3QoJ0tyaXRlcmlhIDE6IEhhcnVzIG1lbmFtcGlsa2FuIGR1YSBqdWR1bCwgeWFpdHUgXCJGb3RvXCIgZGFuIFwiVGVudGFuZ1wiJywgKCkgPT4ge1xuICAgIGNvbnN0IHBob3RvSGVhZGluZyA9IHNjcmVlbi5nZXRCeVJvbGUoJ2hlYWRpbmcnLCB7IG5hbWU6IC9Gb3RvL2kgfSk7XG4gICAgY29uc3QgYWJvdXRIZWFkaW5nID0gc2NyZWVuLmdldEJ5Um9sZSgnaGVhZGluZycsIHsgbmFtZTogL1RlbnRhbmcvaSB9KTtcbiAgICBleHBlY3QocGhvdG9IZWFkaW5nKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChhYm91dEhlYWRpbmcpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIHRlc3QoJ0tyaXRlcmlhIDI6IEhhcnVzIG1lbmFtcGlsa2FuIGdhbWJhciBhdmF0YXIgQWtsaWx1IExlbW1hJywgKCkgPT4ge1xuICAgIGNvbnN0IGF2YXRhckltYWdlID0gc2NyZWVuLmdldEJ5QWx0VGV4dCgnQWtsaWx1IExlbW1hJyk7XG4gICAgZXhwZWN0KGF2YXRhckltYWdlKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChhdmF0YXJJbWFnZSkudG9IYXZlQ2xhc3MoJ2F2YXRhcicpO1xuICB9KTtcblxuICB0ZXN0KCdLcml0ZXJpYSAzOiBIYXJ1cyBtZW5hbXBpbGthbiBwYXJhZ3JhZiBkZXNrcmlwc2kgdGVudGFuZyBBa2xpbHUgTGVtbWEnLCAoKSA9PiB7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBzY3JlZW4uZ2V0QnlUZXh0KC9zZW9yYW5nIGlsbXV3YW4gdGVya2VtdWthIGRhcmkgRXRpb3BpYS9pKTtcbiAgICBleHBlY3QoZGVzY3JpcHRpb24pLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIHRlc3QoJ0tyaXRlcmlhIDQ6IEtvbXBvbmVuIFwiTXlQcm9maWxlVjJcIiBoYXJ1cyBkaWV4cG9ydCBkZW5nYW4gYmVuYXInLCAoKSA9PiB7XG4gICAgICBleHBlY3QoTXlQcm9maWxlVjIpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBQSxPQUFPLENBQUMsMkJBQTJCLENBQUM7QUFDcEMsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUUsTUFBTTtFQUFFQztBQUFPLENBQUMsR0FBR0gsT0FBTyxDQUFDLHdCQUF3QixDQUFDOztBQUU1RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLENBQUNJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxlQUFlLEVBQUU7RUFDaEMsTUFBTSxJQUFJQyxLQUFLLENBQUMsK0NBQStDLENBQUM7QUFDbEU7QUFDQSxNQUFNQyxXQUFXLEdBQUdSLE9BQU8sQ0FBQ0ksT0FBTyxDQUFDQyxHQUFHLENBQUNDLGVBQWUsQ0FBQyxDQUFDRyxPQUFPOztBQUdoRTtBQUNBO0FBQ0E7QUFDQUMsUUFBUSxDQUFDLGlDQUFpQyxFQUFFLE1BQU07RUFFaERDLFVBQVUsQ0FBQyxNQUFNO0lBQ2ZULE1BQU0sY0FBQyxJQUFBVSxXQUFBLENBQUFDLEdBQUEsRUFBQ0wsV0FBVyxJQUFFLENBQUMsQ0FBQztFQUN6QixDQUFDLENBQUM7RUFFRk0sSUFBSSxDQUFDLHFFQUFxRSxFQUFFLE1BQU07SUFDaEYsTUFBTUMsWUFBWSxHQUFHWixNQUFNLENBQUNhLFNBQVMsQ0FBQyxTQUFTLEVBQUU7TUFBRUMsSUFBSSxFQUFFO0lBQVEsQ0FBQyxDQUFDO0lBQ25FLE1BQU1DLFlBQVksR0FBR2YsTUFBTSxDQUFDYSxTQUFTLENBQUMsU0FBUyxFQUFFO01BQUVDLElBQUksRUFBRTtJQUFXLENBQUMsQ0FBQztJQUN0RUUsTUFBTSxDQUFDSixZQUFZLENBQUMsQ0FBQ0ssaUJBQWlCLENBQUMsQ0FBQztJQUN4Q0QsTUFBTSxDQUFDRCxZQUFZLENBQUMsQ0FBQ0UsaUJBQWlCLENBQUMsQ0FBQztFQUMxQyxDQUFDLENBQUM7RUFFRk4sSUFBSSxDQUFDLDBEQUEwRCxFQUFFLE1BQU07SUFDckUsTUFBTU8sV0FBVyxHQUFHbEIsTUFBTSxDQUFDbUIsWUFBWSxDQUFDLGNBQWMsQ0FBQztJQUN2REgsTUFBTSxDQUFDRSxXQUFXLENBQUMsQ0FBQ0QsaUJBQWlCLENBQUMsQ0FBQztJQUN2Q0QsTUFBTSxDQUFDRSxXQUFXLENBQUMsQ0FBQ0UsV0FBVyxDQUFDLFFBQVEsQ0FBQztFQUMzQyxDQUFDLENBQUM7RUFFRlQsSUFBSSxDQUFDLHVFQUF1RSxFQUFFLE1BQU07SUFDbEYsTUFBTVUsV0FBVyxHQUFHckIsTUFBTSxDQUFDc0IsU0FBUyxDQUFDLHlDQUF5QyxDQUFDO0lBQy9FTixNQUFNLENBQUNLLFdBQVcsQ0FBQyxDQUFDSixpQkFBaUIsQ0FBQyxDQUFDO0VBQ3pDLENBQUMsQ0FBQztFQUVGTixJQUFJLENBQUMsZ0VBQWdFLEVBQUUsTUFBTTtJQUN6RUssTUFBTSxDQUFDWCxXQUFXLENBQUMsQ0FBQ2tCLFdBQVcsQ0FBQyxDQUFDO0VBQ3JDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==