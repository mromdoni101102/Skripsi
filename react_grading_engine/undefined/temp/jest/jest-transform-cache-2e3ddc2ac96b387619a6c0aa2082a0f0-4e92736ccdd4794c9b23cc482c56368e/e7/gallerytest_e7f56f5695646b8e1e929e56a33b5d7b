0ce6ebf2972c04eadfff623ef1709dd1
"use strict";

// ======================================================================
// BAGIAN 1: PERSIAPAN LINGKUNGAN
// ======================================================================

// Mocking (membuat tiruan) dari komponen 'next/image'.
// Ini diperlukan karena kita menjalankan tes di luar lingkungan Next.js.
_getJestObj().mock('next/image', () => {
  // eslint-disable-next-line @next/next/no-img-element
  return props => /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
    ...props
  });
});

// Mock komponen Profile karena kita fokus test Gallery
_getJestObj().mock('../props/profile', () => {
  return function Profile() {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      "data-testid": "profile-component",
      children: "Profile Component"
    });
  };
});

// ======================================================================
// BAGIAN 2: MENGAMBIL KODE MAHASISWA (Satu-satunya yang di-import)
// ======================================================================

// PENTING: Kode ini secara dinamis mengimpor file mahasiswa yang di-upload.
// Path-nya dikirim oleh Controller Laravel melalui environment variable.
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen
} = require('@testing-library/react');
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
const submission = require(process.env.SUBMISSION_PATH);
const Gallery = submission.Gallery || submission.default || submission;

// ======================================================================
// BAGIAN 3: "CHECKLIST" PENILAIAN FUNGSIONAL
// ======================================================================

// Ini adalah inti dari "kunci jawaban" Anda.
// Setiap 'test' adalah satu kriteria penilaian yang akan menghasilkan LULUS atau GAGAL.
describe('Praktikum: Komponen Gallery', () => {
  // Fungsi ini akan dijalankan sebelum setiap 'test' di bawah ini.
  // Tujuannya agar kita tidak perlu menulis `render(<Gallery />)` berulang kali.
  beforeEach(() => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Gallery, {}));
  });
  test('Kriteria 1: Harus menampilkan container gallery dengan class "columns-3"', () => {
    const galleryContainer = document.querySelector('.columns-3');
    expect(galleryContainer).toBeInTheDocument();
    expect(galleryContainer).toHaveClass('columns-3');
  });
  test('Kriteria 2: Container gallery harus memiliki struktur HTML yang benar', () => {
    const {
      container
    } = render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Gallery, {}));
    const galleryDiv = container.firstChild;
    expect(galleryDiv).toBeInTheDocument();
    expect(galleryDiv.tagName.toLowerCase()).toBe('div');
    expect(galleryDiv).toHaveClass('columns-3');
  });
  test('Kriteria 3: Harus menampilkan tepat 3 komponen Profile', () => {
    const profileComponents = screen.getAllByTestId('profile-component');
    expect(profileComponents).toHaveLength(3);
  });
  test('Kriteria 4: Setiap komponen Profile harus ter-render dengan benar', () => {
    const profileComponents = screen.getAllByTestId('profile-component');
    profileComponents.forEach(profile => {
      expect(profile).toBeInTheDocument();
      expect(profile).toHaveTextContent('Profile Component');
    });
  });
  test('Kriteria 5: Container gallery harus memiliki tepat 3 child elements', () => {
    const {
      container
    } = render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Gallery, {}));
    const galleryContainer = container.querySelector('.columns-3');
    const profiles = screen.getAllByTestId('profile-component');
    expect(galleryContainer.children).toHaveLength(3);
    expect(profiles).toHaveLength(3);
  });
  test('Kriteria 6: Semua komponen Profile harus berada di dalam container Gallery', () => {
    const {
      container
    } = render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Gallery, {}));
    const galleryDiv = container.firstChild;
    const profileElements = screen.getAllByTestId('profile-component');
    profileElements.forEach(profile => {
      expect(galleryDiv).toContainElement(profile);
    });
  });
  test('Kriteria 7: Gallery container harus memiliki struktur yang tepat', () => {
    const {
      container
    } = render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Gallery, {}));
    const galleryContainer = container.querySelector('.columns-3');
    expect(galleryContainer).toBeInTheDocument();
    expect(galleryContainer).toHaveClass('columns-3');
  });
  test('Kriteria 8: Komponen harus dapat di-render tanpa error', () => {
    expect(() => render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Gallery, {}))).not.toThrow();
  });
  test('Kriteria 9: Komponen "Gallery" harus diexport dengan benar', () => {
    // Tes ini memastikan mahasiswa tidak lupa mengekspor komponen mereka
    expect(Gallery).toBeDefined();
    expect(typeof Gallery).toBe('function');
  });
  test('Kriteria 10: Struktur DOM harus sesuai dengan spesifikasi', () => {
    const {
      container
    } = render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Gallery, {}));
    const galleryDiv = container.firstChild;

    // Memastikan struktur: div.columns-3 > Profile + Profile + Profile
    expect(galleryDiv).toBeInTheDocument();
    expect(galleryDiv).toHaveClass('columns-3');
    expect(galleryDiv.children).toHaveLength(3);
  });
  test('Kriteria 11: Class "columns-3" harus diterapkan dengan benar', () => {
    const {
      container
    } = render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Gallery, {}));
    const galleryContainer = container.querySelector('.columns-3');
    expect(galleryContainer).toHaveClass('columns-3');
  });
  test('Kriteria 12: Tidak boleh ada elemen tambahan selain container dan Profile components', () => {
    const {
      container
    } = render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Gallery, {}));
    const galleryDiv = container.firstChild;

    // Pastikan hanya ada 1 container div
    expect(container.children).toHaveLength(1);
    // Pastikan container div hanya memiliki 3 Profile components
    expect(galleryDiv.children).toHaveLength(3);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,