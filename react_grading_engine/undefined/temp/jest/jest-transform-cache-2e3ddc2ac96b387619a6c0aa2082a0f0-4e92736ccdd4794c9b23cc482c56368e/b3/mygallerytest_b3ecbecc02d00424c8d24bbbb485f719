0f9dba9158e20c17f12054398739bbcb
"use strict";

// ======================================================================
// BAGIAN 1: PERSIAPAN LINGKUNGAN (MOCKING YANG LEBIH PINTAR)
// ======================================================================

// Ini adalah trik yang sangat kuat.
// Kita memberitahu Jest: "Jika ada kode yang mencoba `import Profile from './profile.js'`
// atau dari path serupa, jangan cari file aslinya. Berikan saja komponen tiruan ini."
// Ini akan mencegah error "Cannot find module" di dalam kode mahasiswa.
_getJestObj().mock('./profile', () => {
  return function MockedProfile() {
    // Kita beri tanda pengenal agar bisa kita hitung di dalam tes.
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      "data-testid": "profile-component"
    });
  };
}, {
  virtual: true
}); // virtual: true membuatnya tidak perlu file asli sama sekali.

// Lakukan hal yang sama untuk getImageUrl jika dibutuhkan
_getJestObj().mock('./utils', () => ({
  getImageUrl: person => `https://i.imgur.com/${person.imageId}s.jpg`
}), {
  virtual: true
});

// ======================================================================
// BAGIAN 2: MENGAMBIL KODE MAHASISWA
// ======================================================================
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen
} = require('@testing-library/react');
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
const submission = require(process.env.SUBMISSION_PATH);
const MyGallery = submission.MyGallery || submission.default || submission;

// ======================================================================
// BAGIAN 3: "CHECKLIST" PENILAIAN YANG SUDAH DISESUAIKAN
// ======================================================================
describe('Praktikum: Komponen MyGallery', () => {
  beforeEach(() => {
    // Dengan mock yang benar, render ini seharusnya tidak lagi crash.
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(MyGallery, {}));
  });
  test('Kriteria 1: Harus menampilkan judul utama "Notable Scientists"', () => {
    const mainHeading = screen.getByRole('heading', {
      level: 1,
      name: /Notable Scientists/i
    });
    expect(mainHeading).toBeInTheDocument();
  });
  test('Kriteria 2: Harus menampilkan DUA nama ilmuwan sebagai sub-judul', () => {
    const mariaHeading = screen.getByRole('heading', {
      name: /Maria SkÅ‚odowska-Curie/i
    });
    const katsukoHeading = screen.getByRole('heading', {
      name: /Katsuko Saruhashi/i
    });
    expect(mariaHeading).toBeInTheDocument();
    expect(katsukoHeading).toBeInTheDocument();
  });
  test('Kriteria 3: Harus me-render TEPAT 2 komponen Profile tiruan', () => {
    // Kita sekarang bisa mencari 'data-testid' dari komponen tiruan kita.
    const profileMocks = screen.getAllByTestId('profile-component');
    expect(profileMocks).toHaveLength(2);
  });
  test('Kriteria 4: Harus menampilkan detail spesifik seperti profesi', () => {
    // Kita tetap bisa menguji teks yang seharusnya ada di dalam komponen MyGallery.
    expect(screen.getByText(/Fisikawan dan kimiawan/i)).toBeInTheDocument();
    expect(screen.getByText(/Ahli Geokimia/i)).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJNb2NrZWRQcm9maWxlIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJ2aXJ0dWFsIiwiZ2V0SW1hZ2VVcmwiLCJwZXJzb24iLCJpbWFnZUlkIiwicmVxdWlyZSIsImplc3QiLCJSZWFjdCIsInJlbmRlciIsInNjcmVlbiIsInByb2Nlc3MiLCJlbnYiLCJTVUJNSVNTSU9OX1BBVEgiLCJFcnJvciIsInN1Ym1pc3Npb24iLCJNeUdhbGxlcnkiLCJkZWZhdWx0IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwidGVzdCIsIm1haW5IZWFkaW5nIiwiZ2V0QnlSb2xlIiwibGV2ZWwiLCJuYW1lIiwiZXhwZWN0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJtYXJpYUhlYWRpbmciLCJrYXRzdWtvSGVhZGluZyIsInByb2ZpbGVNb2NrcyIsImdldEFsbEJ5VGVzdElkIiwidG9IYXZlTGVuZ3RoIiwiZ2V0QnlUZXh0Il0sInNvdXJjZXMiOlsibXlnYWxsZXJ5LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBqc2RvbVxuICovXG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHJlbmRlciwgc2NyZWVuIH0gPSByZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L3JlYWN0Jyk7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJBR0lBTiAxOiBQRVJTSUFQQU4gTElOR0tVTkdBTiAoTU9DS0lORyBZQU5HIExFQklIIFBJTlRBUilcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gSW5pIGFkYWxhaCB0cmlrIHlhbmcgc2FuZ2F0IGt1YXQuXG4vLyBLaXRhIG1lbWJlcml0YWh1IEplc3Q6IFwiSmlrYSBhZGEga29kZSB5YW5nIG1lbmNvYmEgYGltcG9ydCBQcm9maWxlIGZyb20gJy4vcHJvZmlsZS5qcydgXG4vLyBhdGF1IGRhcmkgcGF0aCBzZXJ1cGEsIGphbmdhbiBjYXJpIGZpbGUgYXNsaW55YS4gQmVyaWthbiBzYWphIGtvbXBvbmVuIHRpcnVhbiBpbmkuXCJcbi8vIEluaSBha2FuIG1lbmNlZ2FoIGVycm9yIFwiQ2Fubm90IGZpbmQgbW9kdWxlXCIgZGkgZGFsYW0ga29kZSBtYWhhc2lzd2EuXG5qZXN0Lm1vY2soJy4vcHJvZmlsZScsICgpID0+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24gTW9ja2VkUHJvZmlsZSgpIHtcbiAgICAgICAgLy8gS2l0YSBiZXJpIHRhbmRhIHBlbmdlbmFsIGFnYXIgYmlzYSBraXRhIGhpdHVuZyBkaSBkYWxhbSB0ZXMuXG4gICAgICAgIHJldHVybiA8ZGl2IGRhdGEtdGVzdGlkPVwicHJvZmlsZS1jb21wb25lbnRcIj48L2Rpdj47XG4gICAgfTtcbn0sIHsgdmlydHVhbDogdHJ1ZSB9KTsgLy8gdmlydHVhbDogdHJ1ZSBtZW1idWF0bnlhIHRpZGFrIHBlcmx1IGZpbGUgYXNsaSBzYW1hIHNla2FsaS5cblxuLy8gTGFrdWthbiBoYWwgeWFuZyBzYW1hIHVudHVrIGdldEltYWdlVXJsIGppa2EgZGlidXR1aGthblxuamVzdC5tb2NrKCcuL3V0aWxzJywgKCkgPT4gKHtcbiAgICBnZXRJbWFnZVVybDogKHBlcnNvbikgPT4gYGh0dHBzOi8vaS5pbWd1ci5jb20vJHtwZXJzb24uaW1hZ2VJZH1zLmpwZ2AsXG59KSwgeyB2aXJ0dWFsOiB0cnVlIH0pO1xuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJBR0lBTiAyOiBNRU5HQU1CSUwgS09ERSBNQUhBU0lTV0Fcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmlmICghcHJvY2Vzcy5lbnYuU1VCTUlTU0lPTl9QQVRIKSB7XG4gIHRocm93IG5ldyBFcnJvcignU1VCTUlTU0lPTl9QQVRIIGVudmlyb25tZW50IHZhcmlhYmxlIG5vdCBzZXQuJyk7XG59XG5jb25zdCBzdWJtaXNzaW9uID0gcmVxdWlyZShwcm9jZXNzLmVudi5TVUJNSVNTSU9OX1BBVEgpO1xuY29uc3QgTXlHYWxsZXJ5ID0gc3VibWlzc2lvbi5NeUdhbGxlcnkgfHwgc3VibWlzc2lvbi5kZWZhdWx0IHx8IHN1Ym1pc3Npb247XG5cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQkFHSUFOIDM6IFwiQ0hFQ0tMSVNUXCIgUEVOSUxBSUFOIFlBTkcgU1VEQUggRElTRVNVQUlLQU5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmRlc2NyaWJlKCdQcmFrdGlrdW06IEtvbXBvbmVuIE15R2FsbGVyeScsICgpID0+IHtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAvLyBEZW5nYW4gbW9jayB5YW5nIGJlbmFyLCByZW5kZXIgaW5pIHNlaGFydXNueWEgdGlkYWsgbGFnaSBjcmFzaC5cbiAgICByZW5kZXIoPE15R2FsbGVyeSAvPik7XG4gIH0pO1xuXG4gIHRlc3QoJ0tyaXRlcmlhIDE6IEhhcnVzIG1lbmFtcGlsa2FuIGp1ZHVsIHV0YW1hIFwiTm90YWJsZSBTY2llbnRpc3RzXCInLCAoKSA9PiB7XG4gICAgY29uc3QgbWFpbkhlYWRpbmcgPSBzY3JlZW4uZ2V0QnlSb2xlKCdoZWFkaW5nJywgeyBsZXZlbDogMSwgbmFtZTogL05vdGFibGUgU2NpZW50aXN0cy9pIH0pO1xuICAgIGV4cGVjdChtYWluSGVhZGluZykudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgdGVzdCgnS3JpdGVyaWEgMjogSGFydXMgbWVuYW1waWxrYW4gRFVBIG5hbWEgaWxtdXdhbiBzZWJhZ2FpIHN1Yi1qdWR1bCcsICgpID0+IHtcbiAgICBjb25zdCBtYXJpYUhlYWRpbmcgPSBzY3JlZW4uZ2V0QnlSb2xlKCdoZWFkaW5nJywgeyBuYW1lOiAvTWFyaWEgU2vFgm9kb3dza2EtQ3VyaWUvaSB9KTtcbiAgICBjb25zdCBrYXRzdWtvSGVhZGluZyA9IHNjcmVlbi5nZXRCeVJvbGUoJ2hlYWRpbmcnLCB7IG5hbWU6IC9LYXRzdWtvIFNhcnVoYXNoaS9pIH0pO1xuXG4gICAgZXhwZWN0KG1hcmlhSGVhZGluZykudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoa2F0c3Vrb0hlYWRpbmcpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIHRlc3QoJ0tyaXRlcmlhIDM6IEhhcnVzIG1lLXJlbmRlciBURVBBVCAyIGtvbXBvbmVuIFByb2ZpbGUgdGlydWFuJywgKCkgPT4ge1xuICAgIC8vIEtpdGEgc2VrYXJhbmcgYmlzYSBtZW5jYXJpICdkYXRhLXRlc3RpZCcgZGFyaSBrb21wb25lbiB0aXJ1YW4ga2l0YS5cbiAgICBjb25zdCBwcm9maWxlTW9ja3MgPSBzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoJ3Byb2ZpbGUtY29tcG9uZW50Jyk7XG4gICAgZXhwZWN0KHByb2ZpbGVNb2NrcykudG9IYXZlTGVuZ3RoKDIpO1xuICB9KTtcblxuICB0ZXN0KCdLcml0ZXJpYSA0OiBIYXJ1cyBtZW5hbXBpbGthbiBkZXRhaWwgc3Blc2lmaWsgc2VwZXJ0aSBwcm9mZXNpJywgKCkgPT4ge1xuICAgIC8vIEtpdGEgdGV0YXAgYmlzYSBtZW5ndWppIHRla3MgeWFuZyBzZWhhcnVzbnlhIGFkYSBkaSBkYWxhbSBrb21wb25lbiBNeUdhbGxlcnkuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL0Zpc2lrYXdhbiBkYW4ga2ltaWF3YW4vaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL0FobGkgR2Vva2ltaWEvaSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFPQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU07RUFDekIsT0FBTyxTQUFTQyxhQUFhQSxDQUFBLEVBQUc7SUFDNUI7SUFDQSxvQkFBTyxJQUFBQyxXQUFBLENBQUFDLEdBQUE7TUFBSyxlQUFZO0lBQW1CLENBQU0sQ0FBQztFQUN0RCxDQUFDO0FBQ0wsQ0FBQyxFQUFFO0VBQUVDLE9BQU8sRUFBRTtBQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRXZCO0FBQ0FMLFdBQUEsR0FBS0MsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPO0VBQ3hCSyxXQUFXLEVBQUdDLE1BQU0sSUFBSyx1QkFBdUJBLE1BQU0sQ0FBQ0MsT0FBTztBQUNsRSxDQUFDLENBQUMsRUFBRTtFQUFFSCxPQUFPLEVBQUU7QUFBSyxDQUFDLENBQUM7O0FBR3RCO0FBQ0E7QUFDQTtBQUFBLElBQUFGLFdBQUEsR0FBQU0sT0FBQTtBQUFBLFNBQUFULFlBQUE7RUFBQTtJQUFBVTtFQUFBLElBQUFELE9BQUE7RUFBQVQsV0FBQSxHQUFBQSxDQUFBLEtBQUFVLElBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUE5QkE7QUFDQTtBQUNBO0FBQ0FELE9BQU8sQ0FBQywyQkFBMkIsQ0FBQztBQUNwQyxNQUFNRSxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFRyxNQUFNO0VBQUVDO0FBQU8sQ0FBQyxHQUFHSixPQUFPLENBQUMsd0JBQXdCLENBQUM7QUEwQjVELElBQUksQ0FBQ0ssT0FBTyxDQUFDQyxHQUFHLENBQUNDLGVBQWUsRUFBRTtFQUNoQyxNQUFNLElBQUlDLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQztBQUNsRTtBQUNBLE1BQU1DLFVBQVUsR0FBR1QsT0FBTyxDQUFDSyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsZUFBZSxDQUFDO0FBQ3ZELE1BQU1HLFNBQVMsR0FBR0QsVUFBVSxDQUFDQyxTQUFTLElBQUlELFVBQVUsQ0FBQ0UsT0FBTyxJQUFJRixVQUFVOztBQUcxRTtBQUNBO0FBQ0E7QUFDQUcsUUFBUSxDQUFDLCtCQUErQixFQUFFLE1BQU07RUFFOUNDLFVBQVUsQ0FBQyxNQUFNO0lBQ2Y7SUFDQVYsTUFBTSxjQUFDLElBQUFULFdBQUEsQ0FBQUMsR0FBQSxFQUFDZSxTQUFTLElBQUUsQ0FBQyxDQUFDO0VBQ3ZCLENBQUMsQ0FBQztFQUVGSSxJQUFJLENBQUMsZ0VBQWdFLEVBQUUsTUFBTTtJQUMzRSxNQUFNQyxXQUFXLEdBQUdYLE1BQU0sQ0FBQ1ksU0FBUyxDQUFDLFNBQVMsRUFBRTtNQUFFQyxLQUFLLEVBQUUsQ0FBQztNQUFFQyxJQUFJLEVBQUU7SUFBc0IsQ0FBQyxDQUFDO0lBQzFGQyxNQUFNLENBQUNKLFdBQVcsQ0FBQyxDQUFDSyxpQkFBaUIsQ0FBQyxDQUFDO0VBQ3pDLENBQUMsQ0FBQztFQUVGTixJQUFJLENBQUMsa0VBQWtFLEVBQUUsTUFBTTtJQUM3RSxNQUFNTyxZQUFZLEdBQUdqQixNQUFNLENBQUNZLFNBQVMsQ0FBQyxTQUFTLEVBQUU7TUFBRUUsSUFBSSxFQUFFO0lBQTBCLENBQUMsQ0FBQztJQUNyRixNQUFNSSxjQUFjLEdBQUdsQixNQUFNLENBQUNZLFNBQVMsQ0FBQyxTQUFTLEVBQUU7TUFBRUUsSUFBSSxFQUFFO0lBQXFCLENBQUMsQ0FBQztJQUVsRkMsTUFBTSxDQUFDRSxZQUFZLENBQUMsQ0FBQ0QsaUJBQWlCLENBQUMsQ0FBQztJQUN4Q0QsTUFBTSxDQUFDRyxjQUFjLENBQUMsQ0FBQ0YsaUJBQWlCLENBQUMsQ0FBQztFQUM1QyxDQUFDLENBQUM7RUFFRk4sSUFBSSxDQUFDLDZEQUE2RCxFQUFFLE1BQU07SUFDeEU7SUFDQSxNQUFNUyxZQUFZLEdBQUduQixNQUFNLENBQUNvQixjQUFjLENBQUMsbUJBQW1CLENBQUM7SUFDL0RMLE1BQU0sQ0FBQ0ksWUFBWSxDQUFDLENBQUNFLFlBQVksQ0FBQyxDQUFDLENBQUM7RUFDdEMsQ0FBQyxDQUFDO0VBRUZYLElBQUksQ0FBQywrREFBK0QsRUFBRSxNQUFNO0lBQzFFO0lBQ0FLLE1BQU0sQ0FBQ2YsTUFBTSxDQUFDc0IsU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQ04saUJBQWlCLENBQUMsQ0FBQztJQUN2RUQsTUFBTSxDQUFDZixNQUFNLENBQUNzQixTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDTixpQkFBaUIsQ0FBQyxDQUFDO0VBQ2hFLENBQUMsQ0FBQztBQUVKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==