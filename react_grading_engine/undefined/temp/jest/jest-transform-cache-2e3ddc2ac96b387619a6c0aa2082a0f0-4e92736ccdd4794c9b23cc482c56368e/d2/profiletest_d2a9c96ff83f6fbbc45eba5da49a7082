7a16b6caf47342a875b2930470477623
"use strict";

// Mock next/image untuk keamanan
_getJestObj().mock('next/image', () => {
  return props => /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
    ...props
  });
}, {
  virtual: true
});

// Mengambil kode yang SEBENARNYA diuji (yaitu file dari folder submissions)
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen
} = require('@testing-library/react');
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
const Profile = require(process.env.SUBMISSION_PATH).default;
describe('Praktikum: Komponen Profile', () => {
  beforeEach(() => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Profile, {}));
  });
  test('Kriteria 1: Harus menampilkan sebuah elemen gambar (image)', () => {
    const image = screen.getByRole('img');
    expect(image).toBeInTheDocument();
  });

  // ======================================================================
  // PERBAIKAN DI SINI: Sesuaikan ekspektasi tes dengan isi file dependensi
  // ======================================================================
  test('Kriteria 2: Gambar harus memiliki teks alternatif (alt) yang benar', () => {
    // Kita cari gambar berdasarkan alt text yang ada di dependencies/profile.js
    const image = screen.getByAltText('A Profile');
    expect(image).toBeInTheDocument();
  });
  test('Kriteria 3: Gambar harus memiliki sumber (src) yang benar', () => {
    // Kita cari berdasarkan alt text yang benar, lalu cek src-nya
    const image = screen.getByAltText('A Profile');
    expect(image).toHaveAttribute('src', 'https://i.imgur.com/MK3eW3Am.jpg');
  });
  test('Kriteria 4: Komponen "Profile" harus diexport dengan benar', () => {
    expect(Profile).toBeDefined();
  });
  test('Kriteria 5: Komponen "Profile" harus diexport dengan benar', () => {
    expect(Profile).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJwcm9wcyIsIl9qc3hSdW50aW1lIiwianN4IiwidmlydHVhbCIsInJlcXVpcmUiLCJqZXN0IiwiUmVhY3QiLCJyZW5kZXIiLCJzY3JlZW4iLCJwcm9jZXNzIiwiZW52IiwiU1VCTUlTU0lPTl9QQVRIIiwiRXJyb3IiLCJQcm9maWxlIiwiZGVmYXVsdCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsInRlc3QiLCJpbWFnZSIsImdldEJ5Um9sZSIsImV4cGVjdCIsInRvQmVJblRoZURvY3VtZW50IiwiZ2V0QnlBbHRUZXh0IiwidG9IYXZlQXR0cmlidXRlIiwidG9CZURlZmluZWQiXSwic291cmNlcyI6WyJwcm9maWxlLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAamVzdC1lbnZpcm9ubWVudCBqc2RvbVxuICovXG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHJlbmRlciwgc2NyZWVuIH0gPSByZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L3JlYWN0Jyk7XG5cbi8vIE1vY2sgbmV4dC9pbWFnZSB1bnR1ayBrZWFtYW5hblxuamVzdC5tb2NrKCduZXh0L2ltYWdlJywgKCkgPT4ge1xuICAgIHJldHVybiAocHJvcHMpID0+IDxpbWcgey4uLnByb3BzfSAvPjtcbn0sIHsgdmlydHVhbDogdHJ1ZSB9KTtcblxuLy8gTWVuZ2FtYmlsIGtvZGUgeWFuZyBTRUJFTkFSTllBIGRpdWppICh5YWl0dSBmaWxlIGRhcmkgZm9sZGVyIHN1Ym1pc3Npb25zKVxuaWYgKCFwcm9jZXNzLmVudi5TVUJNSVNTSU9OX1BBVEgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdTVUJNSVNTSU9OX1BBVEggZW52aXJvbm1lbnQgdmFyaWFibGUgbm90IHNldC4nKTtcbn1cbmNvbnN0IFByb2ZpbGUgPSByZXF1aXJlKHByb2Nlc3MuZW52LlNVQk1JU1NJT05fUEFUSCkuZGVmYXVsdDtcblxuZGVzY3JpYmUoJ1ByYWt0aWt1bTogS29tcG9uZW4gUHJvZmlsZScsICgpID0+IHtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICByZW5kZXIoPFByb2ZpbGUgLz4pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnS3JpdGVyaWEgMTogSGFydXMgbWVuYW1waWxrYW4gc2VidWFoIGVsZW1lbiBnYW1iYXIgKGltYWdlKScsICgpID0+IHtcbiAgICAgICAgY29uc3QgaW1hZ2UgPSBzY3JlZW4uZ2V0QnlSb2xlKCdpbWcnKTtcbiAgICAgICAgZXhwZWN0KGltYWdlKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIFBFUkJBSUtBTiBESSBTSU5JOiBTZXN1YWlrYW4gZWtzcGVrdGFzaSB0ZXMgZGVuZ2FuIGlzaSBmaWxlIGRlcGVuZGVuc2lcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgdGVzdCgnS3JpdGVyaWEgMjogR2FtYmFyIGhhcnVzIG1lbWlsaWtpIHRla3MgYWx0ZXJuYXRpZiAoYWx0KSB5YW5nIGJlbmFyJywgKCkgPT4ge1xuICAgICAgICAvLyBLaXRhIGNhcmkgZ2FtYmFyIGJlcmRhc2Fya2FuIGFsdCB0ZXh0IHlhbmcgYWRhIGRpIGRlcGVuZGVuY2llcy9wcm9maWxlLmpzXG4gICAgICAgIGNvbnN0IGltYWdlID0gc2NyZWVuLmdldEJ5QWx0VGV4dCgnQSBQcm9maWxlJyk7XG4gICAgICAgIGV4cGVjdChpbWFnZSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0tyaXRlcmlhIDM6IEdhbWJhciBoYXJ1cyBtZW1pbGlraSBzdW1iZXIgKHNyYykgeWFuZyBiZW5hcicsICgpID0+IHtcbiAgICAgICAgLy8gS2l0YSBjYXJpIGJlcmRhc2Fya2FuIGFsdCB0ZXh0IHlhbmcgYmVuYXIsIGxhbHUgY2VrIHNyYy1ueWFcbiAgICAgICAgY29uc3QgaW1hZ2UgPSBzY3JlZW4uZ2V0QnlBbHRUZXh0KCdBIFByb2ZpbGUnKTtcbiAgICAgICAgZXhwZWN0KGltYWdlKS50b0hhdmVBdHRyaWJ1dGUoJ3NyYycsICdodHRwczovL2kuaW1ndXIuY29tL01LM2VXM0FtLmpwZycpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnS3JpdGVyaWEgNDogS29tcG9uZW4gXCJQcm9maWxlXCIgaGFydXMgZGlleHBvcnQgZGVuZ2FuIGJlbmFyJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoUHJvZmlsZSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbiAgICBcbiAgICB0ZXN0KCdLcml0ZXJpYSA1OiBLb21wb25lbiBcIlByb2ZpbGVcIiBoYXJ1cyBkaWV4cG9ydCBkZW5nYW4gYmVuYXInLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChQcm9maWxlKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBT0E7QUFDQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQU07RUFDMUIsT0FBUUMsS0FBSyxpQkFBSyxJQUFBQyxXQUFBLENBQUFDLEdBQUE7SUFBQSxHQUFTRjtFQUFLLENBQUcsQ0FBQztBQUN4QyxDQUFDLEVBQUU7RUFBRUcsT0FBTyxFQUFFO0FBQUssQ0FBQyxDQUFDOztBQUVyQjtBQUFBLElBQUFGLFdBQUEsR0FBQUcsT0FBQTtBQUFBLFNBQUFOLFlBQUE7RUFBQTtJQUFBTztFQUFBLElBQUFELE9BQUE7RUFBQU4sV0FBQSxHQUFBQSxDQUFBLEtBQUFPLElBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFaQTtBQUNBO0FBQ0E7QUFDQUQsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ3BDLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVHLE1BQU07RUFBRUM7QUFBTyxDQUFDLEdBQUdKLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztBQVE1RCxJQUFJLENBQUNLLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxlQUFlLEVBQUU7RUFDaEMsTUFBTSxJQUFJQyxLQUFLLENBQUMsK0NBQStDLENBQUM7QUFDbEU7QUFDQSxNQUFNQyxPQUFPLEdBQUdULE9BQU8sQ0FBQ0ssT0FBTyxDQUFDQyxHQUFHLENBQUNDLGVBQWUsQ0FBQyxDQUFDRyxPQUFPO0FBRTVEQyxRQUFRLENBQUMsNkJBQTZCLEVBQUUsTUFBTTtFQUUxQ0MsVUFBVSxDQUFDLE1BQU07SUFDYlQsTUFBTSxjQUFDLElBQUFOLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVyxPQUFPLElBQUUsQ0FBQyxDQUFDO0VBQ3ZCLENBQUMsQ0FBQztFQUVGSSxJQUFJLENBQUMsNERBQTRELEVBQUUsTUFBTTtJQUNyRSxNQUFNQyxLQUFLLEdBQUdWLE1BQU0sQ0FBQ1csU0FBUyxDQUFDLEtBQUssQ0FBQztJQUNyQ0MsTUFBTSxDQUFDRixLQUFLLENBQUMsQ0FBQ0csaUJBQWlCLENBQUMsQ0FBQztFQUNyQyxDQUFDLENBQUM7O0VBRUY7RUFDQTtFQUNBO0VBQ0FKLElBQUksQ0FBQyxvRUFBb0UsRUFBRSxNQUFNO0lBQzdFO0lBQ0EsTUFBTUMsS0FBSyxHQUFHVixNQUFNLENBQUNjLFlBQVksQ0FBQyxXQUFXLENBQUM7SUFDOUNGLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDLENBQUNHLGlCQUFpQixDQUFDLENBQUM7RUFDckMsQ0FBQyxDQUFDO0VBRUZKLElBQUksQ0FBQywyREFBMkQsRUFBRSxNQUFNO0lBQ3BFO0lBQ0EsTUFBTUMsS0FBSyxHQUFHVixNQUFNLENBQUNjLFlBQVksQ0FBQyxXQUFXLENBQUM7SUFDOUNGLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDLENBQUNLLGVBQWUsQ0FBQyxLQUFLLEVBQUUsa0NBQWtDLENBQUM7RUFDNUUsQ0FBQyxDQUFDO0VBRUZOLElBQUksQ0FBQyw0REFBNEQsRUFBRSxNQUFNO0lBQ3JFRyxNQUFNLENBQUNQLE9BQU8sQ0FBQyxDQUFDVyxXQUFXLENBQUMsQ0FBQztFQUNqQyxDQUFDLENBQUM7RUFFRlAsSUFBSSxDQUFDLDREQUE0RCxFQUFFLE1BQU07SUFDckVHLE1BQU0sQ0FBQ1AsT0FBTyxDQUFDLENBQUNXLFdBQVcsQ0FBQyxDQUFDO0VBQ2pDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==