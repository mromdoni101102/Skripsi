ac5f0ca9333b34845fff546c485de75c
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
/**
 * @jest-environment jsdom
 */
require('@testing-library/jest-dom');
const React = require('react');
const {
  render,
  screen
} = require('@testing-library/react');

// ======================================================================
// TIDAK ADA MOCKING DEPENDENSI KARENA KODE INI MANDIRI
// ======================================================================

// ======================================================================
// MENGAMBIL KODE MAHASISWA
// ======================================================================
if (!process.env.SUBMISSION_PATH) {
  throw new Error('SUBMISSION_PATH environment variable not set.');
}
// Mengambil komponen utama dari file jawaban mahasiswa.
const Tantangan1 = require(process.env.SUBMISSION_PATH).default;

// ======================================================================
// CHECKLIST PENILAIAN FUNGSIONAL (VERSI LENGKAP ANDA)
// ======================================================================
describe('Praktikum: Komponen PackingList (Tantangan 1)', () => {
  // Render komponen sebelum setiap tes agar tidak perlu diulang
  beforeEach(() => {
    render(/*#__PURE__*/(0, _jsxRuntime.jsx)(Tantangan1, {}));
  });
  test('Kriteria 1: Harus menampilkan judul utama "Sally Ride\'s Packing List"', () => {
    const heading = screen.getByRole('heading', {
      level: 1,
      name: /Sally Ride's Packing List/i
    });
    expect(heading).toBeInTheDocument();
  });
  test('Kriteria 2: Harus me-render struktur dasar (section > ul > 3 li)', () => {
    const list = screen.getByRole('list'); // Mencari <ul>
    expect(list).toBeInTheDocument();

    // Memastikan list berada di dalam section
    const section = list.closest('section');
    expect(section).toBeInTheDocument();
    const listItems = screen.getAllByRole('listitem'); // Mencari semua <li>
    expect(listItems).toHaveLength(3);
  });
  test('Kriteria 3: Semua item list harus memiliki class "item"', () => {
    const listItems = screen.getAllByRole('listitem');
    listItems.forEach(item => {
      expect(item).toHaveClass('item');
    });
  });
  test('Kriteria 4: Item yang dikemas (isPacked=true) harus menampilkan teks dan simbol ✅', () => {
    // Cari item berdasarkan teksnya dan pastikan ada tanda centang
    const spaceSuit = screen.getByText(/Space suit/i);
    expect(spaceSuit).toHaveTextContent('Space suit ✅');
    const helmet = screen.getByText(/Helmet with a golden leaf/i);
    expect(helmet).toHaveTextContent('Helmet with a golden leaf ✅');
  });
  test('Kriteria 5: Item yang belum dikemas (isPacked=false) harus menampilkan teks dan simbol ❌', () => {
    // Cari item berdasarkan teksnya dan pastikan ada tanda silang
    const photo = screen.getByText(/Photo of Tam/i);
    expect(photo).toHaveTextContent('Photo of Tam ❌');
  });

  // Tes yang baru (lebih andal)
  test('Kriteria 6: Harus ada tepat 2 item yang dikemas (✅) dan 1 item yang tidak (❌)', () => {
    // 1. Ambil semua elemen <li>
    const listItems = screen.getAllByRole('listitem');

    // 2. Saring item yang teksnya mengandung simbol ✅
    const packedItems = listItems.filter(item => item.textContent.includes('✅'));
    expect(packedItems).toHaveLength(2);

    // 3. Saring item yang teksnya mengandung simbol ❌
    const unpackedItems = listItems.filter(item => item.textContent.includes('❌'));
    expect(unpackedItems).toHaveLength(1);
  });
  test('Kriteria 7: Komponen harus diexport sebagai default dengan benar', () => {
    expect(Tantangan1).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiUmVhY3QiLCJyZW5kZXIiLCJzY3JlZW4iLCJwcm9jZXNzIiwiZW52IiwiU1VCTUlTU0lPTl9QQVRIIiwiRXJyb3IiLCJUYW50YW5nYW4xIiwiZGVmYXVsdCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsIl9qc3hSdW50aW1lIiwianN4IiwidGVzdCIsImhlYWRpbmciLCJnZXRCeVJvbGUiLCJsZXZlbCIsIm5hbWUiLCJleHBlY3QiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImxpc3QiLCJzZWN0aW9uIiwiY2xvc2VzdCIsImxpc3RJdGVtcyIsImdldEFsbEJ5Um9sZSIsInRvSGF2ZUxlbmd0aCIsImZvckVhY2giLCJpdGVtIiwidG9IYXZlQ2xhc3MiLCJzcGFjZVN1aXQiLCJnZXRCeVRleHQiLCJ0b0hhdmVUZXh0Q29udGVudCIsImhlbG1ldCIsInBob3RvIiwicGFja2VkSXRlbXMiLCJmaWx0ZXIiLCJ0ZXh0Q29udGVudCIsImluY2x1ZGVzIiwidW5wYWNrZWRJdGVtcyIsInRvQmVEZWZpbmVkIl0sInNvdXJjZXMiOlsidGFudGFuZ2FuMS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGplc3QtZW52aXJvbm1lbnQganNkb21cbiAqL1xucmVxdWlyZSgnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbScpO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyByZW5kZXIsIHNjcmVlbiB9ID0gcmVxdWlyZSgnQHRlc3RpbmctbGlicmFyeS9yZWFjdCcpO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBUSURBSyBBREEgTU9DS0lORyBERVBFTkRFTlNJIEtBUkVOQSBLT0RFIElOSSBNQU5ESVJJXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTUVOR0FNQklMIEtPREUgTUFIQVNJU1dBXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5pZiAoIXByb2Nlc3MuZW52LlNVQk1JU1NJT05fUEFUSCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1NVQk1JU1NJT05fUEFUSCBlbnZpcm9ubWVudCB2YXJpYWJsZSBub3Qgc2V0LicpO1xufVxuLy8gTWVuZ2FtYmlsIGtvbXBvbmVuIHV0YW1hIGRhcmkgZmlsZSBqYXdhYmFuIG1haGFzaXN3YS5cbmNvbnN0IFRhbnRhbmdhbjEgPSByZXF1aXJlKHByb2Nlc3MuZW52LlNVQk1JU1NJT05fUEFUSCkuZGVmYXVsdDtcblxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBDSEVDS0xJU1QgUEVOSUxBSUFOIEZVTkdTSU9OQUwgKFZFUlNJIExFTkdLQVAgQU5EQSlcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmRlc2NyaWJlKCdQcmFrdGlrdW06IEtvbXBvbmVuIFBhY2tpbmdMaXN0IChUYW50YW5nYW4gMSknLCAoKSA9PiB7XG5cbiAgICAvLyBSZW5kZXIga29tcG9uZW4gc2ViZWx1bSBzZXRpYXAgdGVzIGFnYXIgdGlkYWsgcGVybHUgZGl1bGFuZ1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICByZW5kZXIoPFRhbnRhbmdhbjEgLz4pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnS3JpdGVyaWEgMTogSGFydXMgbWVuYW1waWxrYW4ganVkdWwgdXRhbWEgXCJTYWxseSBSaWRlXFwncyBQYWNraW5nIExpc3RcIicsICgpID0+IHtcbiAgICAgICAgY29uc3QgaGVhZGluZyA9IHNjcmVlbi5nZXRCeVJvbGUoJ2hlYWRpbmcnLCB7IGxldmVsOiAxLCBuYW1lOiAvU2FsbHkgUmlkZSdzIFBhY2tpbmcgTGlzdC9pIH0pO1xuICAgICAgICBleHBlY3QoaGVhZGluZykudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0tyaXRlcmlhIDI6IEhhcnVzIG1lLXJlbmRlciBzdHJ1a3R1ciBkYXNhciAoc2VjdGlvbiA+IHVsID4gMyBsaSknLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBzY3JlZW4uZ2V0QnlSb2xlKCdsaXN0Jyk7IC8vIE1lbmNhcmkgPHVsPlxuICAgICAgICBleHBlY3QobGlzdCkudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgICAgICAvLyBNZW1hc3Rpa2FuIGxpc3QgYmVyYWRhIGRpIGRhbGFtIHNlY3Rpb25cbiAgICAgICAgY29uc3Qgc2VjdGlvbiA9IGxpc3QuY2xvc2VzdCgnc2VjdGlvbicpO1xuICAgICAgICBleHBlY3Qoc2VjdGlvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcblxuICAgICAgICBjb25zdCBsaXN0SXRlbXMgPSBzY3JlZW4uZ2V0QWxsQnlSb2xlKCdsaXN0aXRlbScpOyAvLyBNZW5jYXJpIHNlbXVhIDxsaT5cbiAgICAgICAgZXhwZWN0KGxpc3RJdGVtcykudG9IYXZlTGVuZ3RoKDMpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnS3JpdGVyaWEgMzogU2VtdWEgaXRlbSBsaXN0IGhhcnVzIG1lbWlsaWtpIGNsYXNzIFwiaXRlbVwiJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBsaXN0SXRlbXMgPSBzY3JlZW4uZ2V0QWxsQnlSb2xlKCdsaXN0aXRlbScpO1xuICAgICAgICBsaXN0SXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChpdGVtKS50b0hhdmVDbGFzcygnaXRlbScpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ0tyaXRlcmlhIDQ6IEl0ZW0geWFuZyBkaWtlbWFzIChpc1BhY2tlZD10cnVlKSBoYXJ1cyBtZW5hbXBpbGthbiB0ZWtzIGRhbiBzaW1ib2wg4pyFJywgKCkgPT4ge1xuICAgICAgICAvLyBDYXJpIGl0ZW0gYmVyZGFzYXJrYW4gdGVrc255YSBkYW4gcGFzdGlrYW4gYWRhIHRhbmRhIGNlbnRhbmdcbiAgICAgICAgY29uc3Qgc3BhY2VTdWl0ID0gc2NyZWVuLmdldEJ5VGV4dCgvU3BhY2Ugc3VpdC9pKTtcbiAgICAgICAgZXhwZWN0KHNwYWNlU3VpdCkudG9IYXZlVGV4dENvbnRlbnQoJ1NwYWNlIHN1aXQg4pyFJyk7XG5cbiAgICAgICAgY29uc3QgaGVsbWV0ID0gc2NyZWVuLmdldEJ5VGV4dCgvSGVsbWV0IHdpdGggYSBnb2xkZW4gbGVhZi9pKTtcbiAgICAgICAgZXhwZWN0KGhlbG1ldCkudG9IYXZlVGV4dENvbnRlbnQoJ0hlbG1ldCB3aXRoIGEgZ29sZGVuIGxlYWYg4pyFJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdLcml0ZXJpYSA1OiBJdGVtIHlhbmcgYmVsdW0gZGlrZW1hcyAoaXNQYWNrZWQ9ZmFsc2UpIGhhcnVzIG1lbmFtcGlsa2FuIHRla3MgZGFuIHNpbWJvbCDinYwnLCAoKSA9PiB7XG4gICAgICAgIC8vIENhcmkgaXRlbSBiZXJkYXNhcmthbiB0ZWtzbnlhIGRhbiBwYXN0aWthbiBhZGEgdGFuZGEgc2lsYW5nXG4gICAgICAgIGNvbnN0IHBob3RvID0gc2NyZWVuLmdldEJ5VGV4dCgvUGhvdG8gb2YgVGFtL2kpO1xuICAgICAgICBleHBlY3QocGhvdG8pLnRvSGF2ZVRleHRDb250ZW50KCdQaG90byBvZiBUYW0g4p2MJyk7XG4gICAgfSk7XG5cbiAgICAvLyBUZXMgeWFuZyBiYXJ1IChsZWJpaCBhbmRhbClcbiAgICB0ZXN0KCdLcml0ZXJpYSA2OiBIYXJ1cyBhZGEgdGVwYXQgMiBpdGVtIHlhbmcgZGlrZW1hcyAo4pyFKSBkYW4gMSBpdGVtIHlhbmcgdGlkYWsgKOKdjCknLCAoKSA9PiB7XG4gICAgICAgIC8vIDEuIEFtYmlsIHNlbXVhIGVsZW1lbiA8bGk+XG4gICAgICAgIGNvbnN0IGxpc3RJdGVtcyA9IHNjcmVlbi5nZXRBbGxCeVJvbGUoJ2xpc3RpdGVtJyk7XG5cbiAgICAgICAgLy8gMi4gU2FyaW5nIGl0ZW0geWFuZyB0ZWtzbnlhIG1lbmdhbmR1bmcgc2ltYm9sIOKchVxuICAgICAgICBjb25zdCBwYWNrZWRJdGVtcyA9IGxpc3RJdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnRleHRDb250ZW50LmluY2x1ZGVzKCfinIUnKSk7XG4gICAgICAgIGV4cGVjdChwYWNrZWRJdGVtcykudG9IYXZlTGVuZ3RoKDIpO1xuXG4gICAgICAgIC8vIDMuIFNhcmluZyBpdGVtIHlhbmcgdGVrc255YSBtZW5nYW5kdW5nIHNpbWJvbCDinYxcbiAgICAgICAgY29uc3QgdW5wYWNrZWRJdGVtcyA9IGxpc3RJdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnRleHRDb250ZW50LmluY2x1ZGVzKCfinYwnKSk7XG4gICAgICAgIGV4cGVjdCh1bnBhY2tlZEl0ZW1zKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdLcml0ZXJpYSA3OiBLb21wb25lbiBoYXJ1cyBkaWV4cG9ydCBzZWJhZ2FpIGRlZmF1bHQgZGVuZ2FuIGJlbmFyJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoVGFudGFuZ2FuMSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQUEsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ3BDLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVFLE1BQU07RUFBRUM7QUFBTyxDQUFDLEdBQUdILE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQzs7QUFFNUQ7QUFDQTtBQUNBOztBQUdBO0FBQ0E7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